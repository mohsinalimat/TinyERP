///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMemberSelectorError.h"
#import "DBTEAMMembersSetProfileError.h"

#pragma mark - API Object

@implementation DBTEAMMembersSetProfileError

#pragma mark - Constructors

- (instancetype)initWithUserNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetProfileErrorUserNotFound;
  }
  return self;
}

- (instancetype)initWithUserNotInTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetProfileErrorUserNotInTeam;
  }
  return self;
}

- (instancetype)initWithExternalIdAndNewExternalIdUnsafe {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetProfileErrorExternalIdAndNewExternalIdUnsafe;
  }
  return self;
}

- (instancetype)initWithNoNewDataSpecified {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetProfileErrorNoNewDataSpecified;
  }
  return self;
}

- (instancetype)initWithEmailReservedForOtherUser {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetProfileErrorEmailReservedForOtherUser;
  }
  return self;
}

- (instancetype)initWithExternalIdUsedByOtherUser {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetProfileErrorExternalIdUsedByOtherUser;
  }
  return self;
}

- (instancetype)initWithSetProfileDisallowed {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetProfileErrorSetProfileDisallowed;
  }
  return self;
}

- (instancetype)initWithParamCannotBeEmpty {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetProfileErrorParamCannotBeEmpty;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetProfileErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isUserNotFound {
  return _tag == DBTEAMMembersSetProfileErrorUserNotFound;
}

- (BOOL)isUserNotInTeam {
  return _tag == DBTEAMMembersSetProfileErrorUserNotInTeam;
}

- (BOOL)isExternalIdAndNewExternalIdUnsafe {
  return _tag == DBTEAMMembersSetProfileErrorExternalIdAndNewExternalIdUnsafe;
}

- (BOOL)isNoNewDataSpecified {
  return _tag == DBTEAMMembersSetProfileErrorNoNewDataSpecified;
}

- (BOOL)isEmailReservedForOtherUser {
  return _tag == DBTEAMMembersSetProfileErrorEmailReservedForOtherUser;
}

- (BOOL)isExternalIdUsedByOtherUser {
  return _tag == DBTEAMMembersSetProfileErrorExternalIdUsedByOtherUser;
}

- (BOOL)isSetProfileDisallowed {
  return _tag == DBTEAMMembersSetProfileErrorSetProfileDisallowed;
}

- (BOOL)isParamCannotBeEmpty {
  return _tag == DBTEAMMembersSetProfileErrorParamCannotBeEmpty;
}

- (BOOL)isOther {
  return _tag == DBTEAMMembersSetProfileErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMMembersSetProfileErrorUserNotFound:
    return @"DBTEAMMembersSetProfileErrorUserNotFound";
  case DBTEAMMembersSetProfileErrorUserNotInTeam:
    return @"DBTEAMMembersSetProfileErrorUserNotInTeam";
  case DBTEAMMembersSetProfileErrorExternalIdAndNewExternalIdUnsafe:
    return @"DBTEAMMembersSetProfileErrorExternalIdAndNewExternalIdUnsafe";
  case DBTEAMMembersSetProfileErrorNoNewDataSpecified:
    return @"DBTEAMMembersSetProfileErrorNoNewDataSpecified";
  case DBTEAMMembersSetProfileErrorEmailReservedForOtherUser:
    return @"DBTEAMMembersSetProfileErrorEmailReservedForOtherUser";
  case DBTEAMMembersSetProfileErrorExternalIdUsedByOtherUser:
    return @"DBTEAMMembersSetProfileErrorExternalIdUsedByOtherUser";
  case DBTEAMMembersSetProfileErrorSetProfileDisallowed:
    return @"DBTEAMMembersSetProfileErrorSetProfileDisallowed";
  case DBTEAMMembersSetProfileErrorParamCannotBeEmpty:
    return @"DBTEAMMembersSetProfileErrorParamCannotBeEmpty";
  case DBTEAMMembersSetProfileErrorOther:
    return @"DBTEAMMembersSetProfileErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMMembersSetProfileErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMMembersSetProfileErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersSetProfileErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersSetProfileErrorSerializer

+ (NSDictionary *)serialize:(DBTEAMMembersSetProfileError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserNotFound]) {
    jsonDict[@".tag"] = @"user_not_found";
  } else if ([valueObj isUserNotInTeam]) {
    jsonDict[@".tag"] = @"user_not_in_team";
  } else if ([valueObj isExternalIdAndNewExternalIdUnsafe]) {
    jsonDict[@".tag"] = @"external_id_and_new_external_id_unsafe";
  } else if ([valueObj isNoNewDataSpecified]) {
    jsonDict[@".tag"] = @"no_new_data_specified";
  } else if ([valueObj isEmailReservedForOtherUser]) {
    jsonDict[@".tag"] = @"email_reserved_for_other_user";
  } else if ([valueObj isExternalIdUsedByOtherUser]) {
    jsonDict[@".tag"] = @"external_id_used_by_other_user";
  } else if ([valueObj isSetProfileDisallowed]) {
    jsonDict[@".tag"] = @"set_profile_disallowed";
  } else if ([valueObj isParamCannotBeEmpty]) {
    jsonDict[@".tag"] = @"param_cannot_be_empty";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBTEAMMembersSetProfileError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_not_found"]) {
    return [[DBTEAMMembersSetProfileError alloc] initWithUserNotFound];
  } else if ([tag isEqualToString:@"user_not_in_team"]) {
    return [[DBTEAMMembersSetProfileError alloc] initWithUserNotInTeam];
  } else if ([tag isEqualToString:@"external_id_and_new_external_id_unsafe"]) {
    return [[DBTEAMMembersSetProfileError alloc] initWithExternalIdAndNewExternalIdUnsafe];
  } else if ([tag isEqualToString:@"no_new_data_specified"]) {
    return [[DBTEAMMembersSetProfileError alloc] initWithNoNewDataSpecified];
  } else if ([tag isEqualToString:@"email_reserved_for_other_user"]) {
    return [[DBTEAMMembersSetProfileError alloc] initWithEmailReservedForOtherUser];
  } else if ([tag isEqualToString:@"external_id_used_by_other_user"]) {
    return [[DBTEAMMembersSetProfileError alloc] initWithExternalIdUsedByOtherUser];
  } else if ([tag isEqualToString:@"set_profile_disallowed"]) {
    return [[DBTEAMMembersSetProfileError alloc] initWithSetProfileDisallowed];
  } else if ([tag isEqualToString:@"param_cannot_be_empty"]) {
    return [[DBTEAMMembersSetProfileError alloc] initWithParamCannotBeEmpty];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMMembersSetProfileError alloc] initWithOther];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
