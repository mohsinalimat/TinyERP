///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMembersDeactivateError.h"
#import "DBTEAMMembersRemoveError.h"

#pragma mark - API Object

@implementation DBTEAMMembersRemoveError

#pragma mark - Constructors

- (instancetype)initWithUserNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorUserNotFound;
  }
  return self;
}

- (instancetype)initWithUserNotInTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorUserNotInTeam;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorOther;
  }
  return self;
}

- (instancetype)initWithRemoveLastAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorRemoveLastAdmin;
  }
  return self;
}

- (instancetype)initWithRemovedAndTransferDestShouldDiffer {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorRemovedAndTransferDestShouldDiffer;
  }
  return self;
}

- (instancetype)initWithRemovedAndTransferAdminShouldDiffer {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorRemovedAndTransferAdminShouldDiffer;
  }
  return self;
}

- (instancetype)initWithTransferDestUserNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorTransferDestUserNotFound;
  }
  return self;
}

- (instancetype)initWithTransferDestUserNotInTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorTransferDestUserNotInTeam;
  }
  return self;
}

- (instancetype)initWithTransferAdminUserNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorTransferAdminUserNotFound;
  }
  return self;
}

- (instancetype)initWithTransferAdminUserNotInTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorTransferAdminUserNotInTeam;
  }
  return self;
}

- (instancetype)initWithUnspecifiedTransferAdminId {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorUnspecifiedTransferAdminId;
  }
  return self;
}

- (instancetype)initWithTransferAdminIsNotAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorTransferAdminIsNotAdmin;
  }
  return self;
}

- (instancetype)initWithCannotKeepAccountAndTransfer {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorCannotKeepAccountAndTransfer;
  }
  return self;
}

- (instancetype)initWithCannotKeepAccountAndDeleteData {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorCannotKeepAccountAndDeleteData;
  }
  return self;
}

- (instancetype)initWithEmailAddressTooLongToBeDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorEmailAddressTooLongToBeDisabled;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isUserNotFound {
  return _tag == DBTEAMMembersRemoveErrorUserNotFound;
}

- (BOOL)isUserNotInTeam {
  return _tag == DBTEAMMembersRemoveErrorUserNotInTeam;
}

- (BOOL)isOther {
  return _tag == DBTEAMMembersRemoveErrorOther;
}

- (BOOL)isRemoveLastAdmin {
  return _tag == DBTEAMMembersRemoveErrorRemoveLastAdmin;
}

- (BOOL)isRemovedAndTransferDestShouldDiffer {
  return _tag == DBTEAMMembersRemoveErrorRemovedAndTransferDestShouldDiffer;
}

- (BOOL)isRemovedAndTransferAdminShouldDiffer {
  return _tag == DBTEAMMembersRemoveErrorRemovedAndTransferAdminShouldDiffer;
}

- (BOOL)isTransferDestUserNotFound {
  return _tag == DBTEAMMembersRemoveErrorTransferDestUserNotFound;
}

- (BOOL)isTransferDestUserNotInTeam {
  return _tag == DBTEAMMembersRemoveErrorTransferDestUserNotInTeam;
}

- (BOOL)isTransferAdminUserNotFound {
  return _tag == DBTEAMMembersRemoveErrorTransferAdminUserNotFound;
}

- (BOOL)isTransferAdminUserNotInTeam {
  return _tag == DBTEAMMembersRemoveErrorTransferAdminUserNotInTeam;
}

- (BOOL)isUnspecifiedTransferAdminId {
  return _tag == DBTEAMMembersRemoveErrorUnspecifiedTransferAdminId;
}

- (BOOL)isTransferAdminIsNotAdmin {
  return _tag == DBTEAMMembersRemoveErrorTransferAdminIsNotAdmin;
}

- (BOOL)isCannotKeepAccountAndTransfer {
  return _tag == DBTEAMMembersRemoveErrorCannotKeepAccountAndTransfer;
}

- (BOOL)isCannotKeepAccountAndDeleteData {
  return _tag == DBTEAMMembersRemoveErrorCannotKeepAccountAndDeleteData;
}

- (BOOL)isEmailAddressTooLongToBeDisabled {
  return _tag == DBTEAMMembersRemoveErrorEmailAddressTooLongToBeDisabled;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMMembersRemoveErrorUserNotFound:
    return @"DBTEAMMembersRemoveErrorUserNotFound";
  case DBTEAMMembersRemoveErrorUserNotInTeam:
    return @"DBTEAMMembersRemoveErrorUserNotInTeam";
  case DBTEAMMembersRemoveErrorOther:
    return @"DBTEAMMembersRemoveErrorOther";
  case DBTEAMMembersRemoveErrorRemoveLastAdmin:
    return @"DBTEAMMembersRemoveErrorRemoveLastAdmin";
  case DBTEAMMembersRemoveErrorRemovedAndTransferDestShouldDiffer:
    return @"DBTEAMMembersRemoveErrorRemovedAndTransferDestShouldDiffer";
  case DBTEAMMembersRemoveErrorRemovedAndTransferAdminShouldDiffer:
    return @"DBTEAMMembersRemoveErrorRemovedAndTransferAdminShouldDiffer";
  case DBTEAMMembersRemoveErrorTransferDestUserNotFound:
    return @"DBTEAMMembersRemoveErrorTransferDestUserNotFound";
  case DBTEAMMembersRemoveErrorTransferDestUserNotInTeam:
    return @"DBTEAMMembersRemoveErrorTransferDestUserNotInTeam";
  case DBTEAMMembersRemoveErrorTransferAdminUserNotFound:
    return @"DBTEAMMembersRemoveErrorTransferAdminUserNotFound";
  case DBTEAMMembersRemoveErrorTransferAdminUserNotInTeam:
    return @"DBTEAMMembersRemoveErrorTransferAdminUserNotInTeam";
  case DBTEAMMembersRemoveErrorUnspecifiedTransferAdminId:
    return @"DBTEAMMembersRemoveErrorUnspecifiedTransferAdminId";
  case DBTEAMMembersRemoveErrorTransferAdminIsNotAdmin:
    return @"DBTEAMMembersRemoveErrorTransferAdminIsNotAdmin";
  case DBTEAMMembersRemoveErrorCannotKeepAccountAndTransfer:
    return @"DBTEAMMembersRemoveErrorCannotKeepAccountAndTransfer";
  case DBTEAMMembersRemoveErrorCannotKeepAccountAndDeleteData:
    return @"DBTEAMMembersRemoveErrorCannotKeepAccountAndDeleteData";
  case DBTEAMMembersRemoveErrorEmailAddressTooLongToBeDisabled:
    return @"DBTEAMMembersRemoveErrorEmailAddressTooLongToBeDisabled";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMMembersRemoveErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMMembersRemoveErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersRemoveErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersRemoveErrorSerializer

+ (NSDictionary *)serialize:(DBTEAMMembersRemoveError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserNotFound]) {
    jsonDict[@".tag"] = @"user_not_found";
  } else if ([valueObj isUserNotInTeam]) {
    jsonDict[@".tag"] = @"user_not_in_team";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isRemoveLastAdmin]) {
    jsonDict[@".tag"] = @"remove_last_admin";
  } else if ([valueObj isRemovedAndTransferDestShouldDiffer]) {
    jsonDict[@".tag"] = @"removed_and_transfer_dest_should_differ";
  } else if ([valueObj isRemovedAndTransferAdminShouldDiffer]) {
    jsonDict[@".tag"] = @"removed_and_transfer_admin_should_differ";
  } else if ([valueObj isTransferDestUserNotFound]) {
    jsonDict[@".tag"] = @"transfer_dest_user_not_found";
  } else if ([valueObj isTransferDestUserNotInTeam]) {
    jsonDict[@".tag"] = @"transfer_dest_user_not_in_team";
  } else if ([valueObj isTransferAdminUserNotFound]) {
    jsonDict[@".tag"] = @"transfer_admin_user_not_found";
  } else if ([valueObj isTransferAdminUserNotInTeam]) {
    jsonDict[@".tag"] = @"transfer_admin_user_not_in_team";
  } else if ([valueObj isUnspecifiedTransferAdminId]) {
    jsonDict[@".tag"] = @"unspecified_transfer_admin_id";
  } else if ([valueObj isTransferAdminIsNotAdmin]) {
    jsonDict[@".tag"] = @"transfer_admin_is_not_admin";
  } else if ([valueObj isCannotKeepAccountAndTransfer]) {
    jsonDict[@".tag"] = @"cannot_keep_account_and_transfer";
  } else if ([valueObj isCannotKeepAccountAndDeleteData]) {
    jsonDict[@".tag"] = @"cannot_keep_account_and_delete_data";
  } else if ([valueObj isEmailAddressTooLongToBeDisabled]) {
    jsonDict[@".tag"] = @"email_address_too_long_to_be_disabled";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBTEAMMembersRemoveError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_not_found"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithUserNotFound];
  } else if ([tag isEqualToString:@"user_not_in_team"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithUserNotInTeam];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithOther];
  } else if ([tag isEqualToString:@"remove_last_admin"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithRemoveLastAdmin];
  } else if ([tag isEqualToString:@"removed_and_transfer_dest_should_differ"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithRemovedAndTransferDestShouldDiffer];
  } else if ([tag isEqualToString:@"removed_and_transfer_admin_should_differ"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithRemovedAndTransferAdminShouldDiffer];
  } else if ([tag isEqualToString:@"transfer_dest_user_not_found"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithTransferDestUserNotFound];
  } else if ([tag isEqualToString:@"transfer_dest_user_not_in_team"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithTransferDestUserNotInTeam];
  } else if ([tag isEqualToString:@"transfer_admin_user_not_found"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithTransferAdminUserNotFound];
  } else if ([tag isEqualToString:@"transfer_admin_user_not_in_team"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithTransferAdminUserNotInTeam];
  } else if ([tag isEqualToString:@"unspecified_transfer_admin_id"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithUnspecifiedTransferAdminId];
  } else if ([tag isEqualToString:@"transfer_admin_is_not_admin"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithTransferAdminIsNotAdmin];
  } else if ([tag isEqualToString:@"cannot_keep_account_and_transfer"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithCannotKeepAccountAndTransfer];
  } else if ([tag isEqualToString:@"cannot_keep_account_and_delete_data"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithCannotKeepAccountAndDeleteData];
  } else if ([tag isEqualToString:@"email_address_too_long_to_be_disabled"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithEmailAddressTooLongToBeDisabled];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
