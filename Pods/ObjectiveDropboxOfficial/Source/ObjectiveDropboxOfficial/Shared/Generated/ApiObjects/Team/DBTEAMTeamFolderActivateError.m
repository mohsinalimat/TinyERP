///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamFolderAccessError.h"
#import "DBTEAMTeamFolderActivateError.h"
#import "DBTEAMTeamFolderInvalidStatusError.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderActivateError

@synthesize accessError = _accessError;
@synthesize statusError = _statusError;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBTEAMTeamFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderActivateErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithStatusError:(DBTEAMTeamFolderInvalidStatusError *)statusError {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderActivateErrorStatusError;
    _statusError = statusError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderActivateErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMTeamFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMTeamFolderActivateErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

- (DBTEAMTeamFolderInvalidStatusError *)statusError {
  if (![self isStatusError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMTeamFolderActivateErrorStatusError, but was %@.", [self tagName]];
  }
  return _statusError;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBTEAMTeamFolderActivateErrorAccessError;
}

- (BOOL)isStatusError {
  return _tag == DBTEAMTeamFolderActivateErrorStatusError;
}

- (BOOL)isOther {
  return _tag == DBTEAMTeamFolderActivateErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMTeamFolderActivateErrorAccessError:
    return @"DBTEAMTeamFolderActivateErrorAccessError";
  case DBTEAMTeamFolderActivateErrorStatusError:
    return @"DBTEAMTeamFolderActivateErrorStatusError";
  case DBTEAMTeamFolderActivateErrorOther:
    return @"DBTEAMTeamFolderActivateErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMTeamFolderActivateErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMTeamFolderActivateErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderActivateErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderActivateErrorSerializer

+ (NSDictionary *)serialize:(DBTEAMTeamFolderActivateError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] = [[DBTEAMTeamFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isStatusError]) {
    jsonDict[@"status_error"] =
        [[DBTEAMTeamFolderInvalidStatusErrorSerializer serialize:valueObj.statusError] mutableCopy];
    jsonDict[@".tag"] = @"status_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBTEAMTeamFolderActivateError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBTEAMTeamFolderAccessError *accessError =
        [DBTEAMTeamFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBTEAMTeamFolderActivateError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"status_error"]) {
    DBTEAMTeamFolderInvalidStatusError *statusError =
        [DBTEAMTeamFolderInvalidStatusErrorSerializer deserialize:valueDict[@"status_error"]];
    return [[DBTEAMTeamFolderActivateError alloc] initWithStatusError:statusError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMTeamFolderActivateError alloc] initWithOther];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
