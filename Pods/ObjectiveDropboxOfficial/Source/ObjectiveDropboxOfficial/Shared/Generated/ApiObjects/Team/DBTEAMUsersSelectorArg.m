///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMUsersSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMUsersSelectorArg

@synthesize teamMemberIds = _teamMemberIds;
@synthesize externalIds = _externalIds;
@synthesize emails = _emails;

#pragma mark - Constructors

- (instancetype)initWithTeamMemberIds:(NSArray<NSString *> *)teamMemberIds {
  self = [super init];
  if (self) {
    _tag = DBTEAMUsersSelectorArgTeamMemberIds;
    _teamMemberIds = teamMemberIds;
  }
  return self;
}

- (instancetype)initWithExternalIds:(NSArray<NSString *> *)externalIds {
  self = [super init];
  if (self) {
    _tag = DBTEAMUsersSelectorArgExternalIds;
    _externalIds = externalIds;
  }
  return self;
}

- (instancetype)initWithEmails:(NSArray<NSString *> *)emails {
  self = [super init];
  if (self) {
    _tag = DBTEAMUsersSelectorArgEmails;
    _emails = emails;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSArray<NSString *> *)teamMemberIds {
  if (![self isTeamMemberIds]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMUsersSelectorArgTeamMemberIds, but was %@.", [self tagName]];
  }
  return _teamMemberIds;
}

- (NSArray<NSString *> *)externalIds {
  if (![self isExternalIds]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMUsersSelectorArgExternalIds, but was %@.", [self tagName]];
  }
  return _externalIds;
}

- (NSArray<NSString *> *)emails {
  if (![self isEmails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMUsersSelectorArgEmails, but was %@.", [self tagName]];
  }
  return _emails;
}

#pragma mark - Tag state methods

- (BOOL)isTeamMemberIds {
  return _tag == DBTEAMUsersSelectorArgTeamMemberIds;
}

- (BOOL)isExternalIds {
  return _tag == DBTEAMUsersSelectorArgExternalIds;
}

- (BOOL)isEmails {
  return _tag == DBTEAMUsersSelectorArgEmails;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMUsersSelectorArgTeamMemberIds:
    return @"DBTEAMUsersSelectorArgTeamMemberIds";
  case DBTEAMUsersSelectorArgExternalIds:
    return @"DBTEAMUsersSelectorArgExternalIds";
  case DBTEAMUsersSelectorArgEmails:
    return @"DBTEAMUsersSelectorArgEmails";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMUsersSelectorArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMUsersSelectorArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMUsersSelectorArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMUsersSelectorArgSerializer

+ (NSDictionary *)serialize:(DBTEAMUsersSelectorArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isTeamMemberIds]) {
    jsonDict[@"team_member_ids"] = [DBArraySerializer serialize:valueObj.teamMemberIds
                                                      withBlock:^id(id elem) {
                                                        return elem;
                                                      }];
    jsonDict[@".tag"] = @"team_member_ids";
  } else if ([valueObj isExternalIds]) {
    jsonDict[@"external_ids"] = [DBArraySerializer serialize:valueObj.externalIds
                                                   withBlock:^id(id elem) {
                                                     return elem;
                                                   }];
    jsonDict[@".tag"] = @"external_ids";
  } else if ([valueObj isEmails]) {
    jsonDict[@"emails"] = [DBArraySerializer serialize:valueObj.emails
                                             withBlock:^id(id elem) {
                                               return elem;
                                             }];
    jsonDict[@".tag"] = @"emails";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBTEAMUsersSelectorArg *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"team_member_ids"]) {
    NSArray<NSString *> *teamMemberIds = [DBArraySerializer deserialize:valueDict[@"team_member_ids"]
                                                              withBlock:^id(id elem) {
                                                                return elem;
                                                              }];
    return [[DBTEAMUsersSelectorArg alloc] initWithTeamMemberIds:teamMemberIds];
  } else if ([tag isEqualToString:@"external_ids"]) {
    NSArray<NSString *> *externalIds = [DBArraySerializer deserialize:valueDict[@"external_ids"]
                                                            withBlock:^id(id elem) {
                                                              return elem;
                                                            }];
    return [[DBTEAMUsersSelectorArg alloc] initWithExternalIds:externalIds];
  } else if ([tag isEqualToString:@"emails"]) {
    NSArray<NSString *> *emails = [DBArraySerializer deserialize:valueDict[@"emails"]
                                                       withBlock:^id(id elem) {
                                                         return elem;
                                                       }];
    return [[DBTEAMUsersSelectorArg alloc] initWithEmails:emails];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
