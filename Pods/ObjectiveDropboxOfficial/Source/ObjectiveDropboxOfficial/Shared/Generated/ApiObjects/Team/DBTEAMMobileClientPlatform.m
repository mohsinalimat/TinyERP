///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMobileClientPlatform.h"

#pragma mark - API Object

@implementation DBTEAMMobileClientPlatform

#pragma mark - Constructors

- (instancetype)initWithIphone {
  self = [super init];
  if (self) {
    _tag = DBTEAMMobileClientPlatformIphone;
  }
  return self;
}

- (instancetype)initWithIpad {
  self = [super init];
  if (self) {
    _tag = DBTEAMMobileClientPlatformIpad;
  }
  return self;
}

- (instancetype)initWithAndroid {
  self = [super init];
  if (self) {
    _tag = DBTEAMMobileClientPlatformAndroid;
  }
  return self;
}

- (instancetype)initWithWindowsPhone {
  self = [super init];
  if (self) {
    _tag = DBTEAMMobileClientPlatformWindowsPhone;
  }
  return self;
}

- (instancetype)initWithBlackberry {
  self = [super init];
  if (self) {
    _tag = DBTEAMMobileClientPlatformBlackberry;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMMobileClientPlatformOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isIphone {
  return _tag == DBTEAMMobileClientPlatformIphone;
}

- (BOOL)isIpad {
  return _tag == DBTEAMMobileClientPlatformIpad;
}

- (BOOL)isAndroid {
  return _tag == DBTEAMMobileClientPlatformAndroid;
}

- (BOOL)isWindowsPhone {
  return _tag == DBTEAMMobileClientPlatformWindowsPhone;
}

- (BOOL)isBlackberry {
  return _tag == DBTEAMMobileClientPlatformBlackberry;
}

- (BOOL)isOther {
  return _tag == DBTEAMMobileClientPlatformOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMMobileClientPlatformIphone:
    return @"DBTEAMMobileClientPlatformIphone";
  case DBTEAMMobileClientPlatformIpad:
    return @"DBTEAMMobileClientPlatformIpad";
  case DBTEAMMobileClientPlatformAndroid:
    return @"DBTEAMMobileClientPlatformAndroid";
  case DBTEAMMobileClientPlatformWindowsPhone:
    return @"DBTEAMMobileClientPlatformWindowsPhone";
  case DBTEAMMobileClientPlatformBlackberry:
    return @"DBTEAMMobileClientPlatformBlackberry";
  case DBTEAMMobileClientPlatformOther:
    return @"DBTEAMMobileClientPlatformOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMMobileClientPlatformSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMMobileClientPlatformSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMobileClientPlatformSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMobileClientPlatformSerializer

+ (NSDictionary *)serialize:(DBTEAMMobileClientPlatform *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isIphone]) {
    jsonDict[@".tag"] = @"iphone";
  } else if ([valueObj isIpad]) {
    jsonDict[@".tag"] = @"ipad";
  } else if ([valueObj isAndroid]) {
    jsonDict[@".tag"] = @"android";
  } else if ([valueObj isWindowsPhone]) {
    jsonDict[@".tag"] = @"windows_phone";
  } else if ([valueObj isBlackberry]) {
    jsonDict[@".tag"] = @"blackberry";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBTEAMMobileClientPlatform *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"iphone"]) {
    return [[DBTEAMMobileClientPlatform alloc] initWithIphone];
  } else if ([tag isEqualToString:@"ipad"]) {
    return [[DBTEAMMobileClientPlatform alloc] initWithIpad];
  } else if ([tag isEqualToString:@"android"]) {
    return [[DBTEAMMobileClientPlatform alloc] initWithAndroid];
  } else if ([tag isEqualToString:@"windows_phone"]) {
    return [[DBTEAMMobileClientPlatform alloc] initWithWindowsPhone];
  } else if ([tag isEqualToString:@"blackberry"]) {
    return [[DBTEAMMobileClientPlatform alloc] initWithBlackberry];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMMobileClientPlatform alloc] initWithOther];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
