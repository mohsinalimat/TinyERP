///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMDesktopClientSession.h"
#import "DBTEAMDesktopPlatform.h"
#import "DBTEAMDeviceSession.h"

#pragma mark - API Object

@implementation DBTEAMDesktopClientSession

#pragma mark - Constructors

- (instancetype)initWithSessionId:(NSString *)sessionId
                         hostName:(NSString *)hostName
                       clientType:(DBTEAMDesktopPlatform *)clientType
                    clientVersion:(NSString *)clientVersion
                         platform:(NSString *)platform
        isDeleteOnUnlinkSupported:(NSNumber *)isDeleteOnUnlinkSupported
                        ipAddress:(NSString *)ipAddress
                          country:(NSString *)country
                          created:(NSDate *)created
                          updated:(NSDate *)updated {

  self = [super initWithSessionId:sessionId ipAddress:ipAddress country:country created:created updated:updated];
  if (self) {
    _hostName = hostName;
    _clientType = clientType;
    _clientVersion = clientVersion;
    _platform = platform;
    _isDeleteOnUnlinkSupported = isDeleteOnUnlinkSupported;
  }
  return self;
}

- (instancetype)initWithSessionId:(NSString *)sessionId
                         hostName:(NSString *)hostName
                       clientType:(DBTEAMDesktopPlatform *)clientType
                    clientVersion:(NSString *)clientVersion
                         platform:(NSString *)platform
        isDeleteOnUnlinkSupported:(NSNumber *)isDeleteOnUnlinkSupported {
  return [self initWithSessionId:sessionId
                        hostName:hostName
                      clientType:clientType
                   clientVersion:clientVersion
                        platform:platform
       isDeleteOnUnlinkSupported:isDeleteOnUnlinkSupported
                       ipAddress:nil
                         country:nil
                         created:nil
                         updated:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMDesktopClientSessionSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMDesktopClientSessionSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMDesktopClientSessionSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMDesktopClientSessionSerializer

+ (NSDictionary *)serialize:(DBTEAMDesktopClientSession *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"session_id"] = valueObj.sessionId;
  jsonDict[@"host_name"] = valueObj.hostName;
  jsonDict[@"client_type"] = [DBTEAMDesktopPlatformSerializer serialize:valueObj.clientType];
  jsonDict[@"client_version"] = valueObj.clientVersion;
  jsonDict[@"platform"] = valueObj.platform;
  jsonDict[@"is_delete_on_unlink_supported"] = valueObj.isDeleteOnUnlinkSupported;
  if (valueObj.ipAddress) {
    jsonDict[@"ip_address"] = valueObj.ipAddress;
  }
  if (valueObj.country) {
    jsonDict[@"country"] = valueObj.country;
  }
  if (valueObj.created) {
    jsonDict[@"created"] = [DBNSDateSerializer serialize:valueObj.created dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.updated) {
    jsonDict[@"updated"] = [DBNSDateSerializer serialize:valueObj.updated dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }

  return jsonDict;
}

+ (DBTEAMDesktopClientSession *)deserialize:(NSDictionary *)valueDict {
  NSString *sessionId = valueDict[@"session_id"];
  NSString *hostName = valueDict[@"host_name"];
  DBTEAMDesktopPlatform *clientType = [DBTEAMDesktopPlatformSerializer deserialize:valueDict[@"client_type"]];
  NSString *clientVersion = valueDict[@"client_version"];
  NSString *platform = valueDict[@"platform"];
  NSNumber *isDeleteOnUnlinkSupported = valueDict[@"is_delete_on_unlink_supported"];
  NSString *ipAddress = valueDict[@"ip_address"] ?: nil;
  NSString *country = valueDict[@"country"] ?: nil;
  NSDate *created = valueDict[@"created"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"created"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;
  NSDate *updated = valueDict[@"updated"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"updated"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;

  return [[DBTEAMDesktopClientSession alloc] initWithSessionId:sessionId
                                                      hostName:hostName
                                                    clientType:clientType
                                                 clientVersion:clientVersion
                                                      platform:platform
                                     isDeleteOnUnlinkSupported:isDeleteOnUnlinkSupported
                                                     ipAddress:ipAddress
                                                       country:country
                                                       created:created
                                                       updated:updated];
}

@end
