///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupMemberSelectorError.h"
#import "DBTEAMGroupMemberSetAccessTypeError.h"

#pragma mark - API Object

@implementation DBTEAMGroupMemberSetAccessTypeError

#pragma mark - Constructors

- (instancetype)initWithGroupNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMemberSetAccessTypeErrorGroupNotFound;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMemberSetAccessTypeErrorOther;
  }
  return self;
}

- (instancetype)initWithMemberNotInGroup {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMemberSetAccessTypeErrorMemberNotInGroup;
  }
  return self;
}

- (instancetype)initWithUserCannotBeManagerOfCompanyManagedGroup {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMemberSetAccessTypeErrorUserCannotBeManagerOfCompanyManagedGroup;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isGroupNotFound {
  return _tag == DBTEAMGroupMemberSetAccessTypeErrorGroupNotFound;
}

- (BOOL)isOther {
  return _tag == DBTEAMGroupMemberSetAccessTypeErrorOther;
}

- (BOOL)isMemberNotInGroup {
  return _tag == DBTEAMGroupMemberSetAccessTypeErrorMemberNotInGroup;
}

- (BOOL)isUserCannotBeManagerOfCompanyManagedGroup {
  return _tag == DBTEAMGroupMemberSetAccessTypeErrorUserCannotBeManagerOfCompanyManagedGroup;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMGroupMemberSetAccessTypeErrorGroupNotFound:
    return @"DBTEAMGroupMemberSetAccessTypeErrorGroupNotFound";
  case DBTEAMGroupMemberSetAccessTypeErrorOther:
    return @"DBTEAMGroupMemberSetAccessTypeErrorOther";
  case DBTEAMGroupMemberSetAccessTypeErrorMemberNotInGroup:
    return @"DBTEAMGroupMemberSetAccessTypeErrorMemberNotInGroup";
  case DBTEAMGroupMemberSetAccessTypeErrorUserCannotBeManagerOfCompanyManagedGroup:
    return @"DBTEAMGroupMemberSetAccessTypeErrorUserCannotBeManagerOfCompanyManagedGroup";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMGroupMemberSetAccessTypeErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMGroupMemberSetAccessTypeErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupMemberSetAccessTypeErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupMemberSetAccessTypeErrorSerializer

+ (NSDictionary *)serialize:(DBTEAMGroupMemberSetAccessTypeError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isGroupNotFound]) {
    jsonDict[@".tag"] = @"group_not_found";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isMemberNotInGroup]) {
    jsonDict[@".tag"] = @"member_not_in_group";
  } else if ([valueObj isUserCannotBeManagerOfCompanyManagedGroup]) {
    jsonDict[@".tag"] = @"user_cannot_be_manager_of_company_managed_group";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBTEAMGroupMemberSetAccessTypeError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"group_not_found"]) {
    return [[DBTEAMGroupMemberSetAccessTypeError alloc] initWithGroupNotFound];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMGroupMemberSetAccessTypeError alloc] initWithOther];
  } else if ([tag isEqualToString:@"member_not_in_group"]) {
    return [[DBTEAMGroupMemberSetAccessTypeError alloc] initWithMemberNotInGroup];
  } else if ([tag isEqualToString:@"user_cannot_be_manager_of_company_managed_group"]) {
    return [[DBTEAMGroupMemberSetAccessTypeError alloc] initWithUserCannotBeManagerOfCompanyManagedGroup];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
