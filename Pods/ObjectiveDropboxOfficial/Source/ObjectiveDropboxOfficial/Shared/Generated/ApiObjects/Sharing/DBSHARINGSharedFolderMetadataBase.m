///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSHARINGAccessLevel.h"
#import "DBSHARINGFolderPolicy.h"
#import "DBSHARINGSharedFolderMetadataBase.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSTeam.h"

#pragma mark - API Object

@implementation DBSHARINGSharedFolderMetadataBase

#pragma mark - Constructors

- (instancetype)initWithAccessType:(DBSHARINGAccessLevel *)accessType
                      isTeamFolder:(NSNumber *)isTeamFolder
                            policy:(DBSHARINGFolderPolicy *)policy
                         ownerTeam:(DBUSERSTeam *)ownerTeam
              parentSharedFolderId:(NSString *)parentSharedFolderId {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"]](
      parentSharedFolderId);

  self = [super init];
  if (self) {
    _accessType = accessType;
    _isTeamFolder = isTeamFolder;
    _policy = policy;
    _ownerTeam = ownerTeam;
    _parentSharedFolderId = parentSharedFolderId;
  }
  return self;
}

- (instancetype)initWithAccessType:(DBSHARINGAccessLevel *)accessType
                      isTeamFolder:(NSNumber *)isTeamFolder
                            policy:(DBSHARINGFolderPolicy *)policy {
  return [self initWithAccessType:accessType
                     isTeamFolder:isTeamFolder
                           policy:policy
                        ownerTeam:nil
             parentSharedFolderId:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGSharedFolderMetadataBaseSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGSharedFolderMetadataBaseSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGSharedFolderMetadataBaseSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGSharedFolderMetadataBaseSerializer

+ (NSDictionary *)serialize:(DBSHARINGSharedFolderMetadataBase *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"access_type"] = [DBSHARINGAccessLevelSerializer serialize:valueObj.accessType];
  jsonDict[@"is_team_folder"] = valueObj.isTeamFolder;
  jsonDict[@"policy"] = [DBSHARINGFolderPolicySerializer serialize:valueObj.policy];
  if (valueObj.ownerTeam) {
    jsonDict[@"owner_team"] = [DBUSERSTeamSerializer serialize:valueObj.ownerTeam];
  }
  if (valueObj.parentSharedFolderId) {
    jsonDict[@"parent_shared_folder_id"] = valueObj.parentSharedFolderId;
  }

  return jsonDict;
}

+ (DBSHARINGSharedFolderMetadataBase *)deserialize:(NSDictionary *)valueDict {
  DBSHARINGAccessLevel *accessType = [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"access_type"]];
  NSNumber *isTeamFolder = valueDict[@"is_team_folder"];
  DBSHARINGFolderPolicy *policy = [DBSHARINGFolderPolicySerializer deserialize:valueDict[@"policy"]];
  DBUSERSTeam *ownerTeam =
      valueDict[@"owner_team"] ? [DBUSERSTeamSerializer deserialize:valueDict[@"owner_team"]] : nil;
  NSString *parentSharedFolderId = valueDict[@"parent_shared_folder_id"] ?: nil;

  return [[DBSHARINGSharedFolderMetadataBase alloc] initWithAccessType:accessType
                                                          isTeamFolder:isTeamFolder
                                                                policy:policy
                                                             ownerTeam:ownerTeam
                                                  parentSharedFolderId:parentSharedFolderId];
}

@end
