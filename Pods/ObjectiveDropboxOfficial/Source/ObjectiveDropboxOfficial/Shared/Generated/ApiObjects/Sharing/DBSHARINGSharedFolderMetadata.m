///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSHARINGAccessLevel.h"
#import "DBSHARINGFolderPermission.h"
#import "DBSHARINGFolderPolicy.h"
#import "DBSHARINGSharedFolderMetadata.h"
#import "DBSHARINGSharedFolderMetadataBase.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSTeam.h"

#pragma mark - API Object

@implementation DBSHARINGSharedFolderMetadata

#pragma mark - Constructors

- (instancetype)initWithAccessType:(DBSHARINGAccessLevel *)accessType
                      isTeamFolder:(NSNumber *)isTeamFolder
                            policy:(DBSHARINGFolderPolicy *)policy
                              name:(NSString *)name
                    sharedFolderId:(NSString *)sharedFolderId
                       timeInvited:(NSDate *)timeInvited
                        previewUrl:(NSString *)previewUrl
                         ownerTeam:(DBUSERSTeam *)ownerTeam
              parentSharedFolderId:(NSString *)parentSharedFolderId
                         pathLower:(NSString *)pathLower
                       permissions:(NSArray<DBSHARINGFolderPermission *> *)permissions {
  [DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"](sharedFolderId);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"]](
      parentSharedFolderId);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](permissions);

  self = [super initWithAccessType:accessType
                      isTeamFolder:isTeamFolder
                            policy:policy
                         ownerTeam:ownerTeam
              parentSharedFolderId:parentSharedFolderId];
  if (self) {
    _pathLower = pathLower;
    _name = name;
    _sharedFolderId = sharedFolderId;
    _permissions = permissions;
    _timeInvited = timeInvited;
    _previewUrl = previewUrl;
  }
  return self;
}

- (instancetype)initWithAccessType:(DBSHARINGAccessLevel *)accessType
                      isTeamFolder:(NSNumber *)isTeamFolder
                            policy:(DBSHARINGFolderPolicy *)policy
                              name:(NSString *)name
                    sharedFolderId:(NSString *)sharedFolderId
                       timeInvited:(NSDate *)timeInvited
                        previewUrl:(NSString *)previewUrl {
  return [self initWithAccessType:accessType
                     isTeamFolder:isTeamFolder
                           policy:policy
                             name:name
                   sharedFolderId:sharedFolderId
                      timeInvited:timeInvited
                       previewUrl:previewUrl
                        ownerTeam:nil
             parentSharedFolderId:nil
                        pathLower:nil
                      permissions:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGSharedFolderMetadataSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGSharedFolderMetadataSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGSharedFolderMetadataSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGSharedFolderMetadataSerializer

+ (NSDictionary *)serialize:(DBSHARINGSharedFolderMetadata *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"access_type"] = [DBSHARINGAccessLevelSerializer serialize:valueObj.accessType];
  jsonDict[@"is_team_folder"] = valueObj.isTeamFolder;
  jsonDict[@"policy"] = [DBSHARINGFolderPolicySerializer serialize:valueObj.policy];
  jsonDict[@"name"] = valueObj.name;
  jsonDict[@"shared_folder_id"] = valueObj.sharedFolderId;
  jsonDict[@"time_invited"] = [DBNSDateSerializer serialize:valueObj.timeInvited dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  jsonDict[@"preview_url"] = valueObj.previewUrl;
  if (valueObj.ownerTeam) {
    jsonDict[@"owner_team"] = [DBUSERSTeamSerializer serialize:valueObj.ownerTeam];
  }
  if (valueObj.parentSharedFolderId) {
    jsonDict[@"parent_shared_folder_id"] = valueObj.parentSharedFolderId;
  }
  if (valueObj.pathLower) {
    jsonDict[@"path_lower"] = valueObj.pathLower;
  }
  if (valueObj.permissions) {
    jsonDict[@"permissions"] = [DBArraySerializer serialize:valueObj.permissions
                                                  withBlock:^id(id elem) {
                                                    return [DBSHARINGFolderPermissionSerializer serialize:elem];
                                                  }];
  }

  return jsonDict;
}

+ (DBSHARINGSharedFolderMetadata *)deserialize:(NSDictionary *)valueDict {
  DBSHARINGAccessLevel *accessType = [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"access_type"]];
  NSNumber *isTeamFolder = valueDict[@"is_team_folder"];
  DBSHARINGFolderPolicy *policy = [DBSHARINGFolderPolicySerializer deserialize:valueDict[@"policy"]];
  NSString *name = valueDict[@"name"];
  NSString *sharedFolderId = valueDict[@"shared_folder_id"];
  NSDate *timeInvited = [DBNSDateSerializer deserialize:valueDict[@"time_invited"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  NSString *previewUrl = valueDict[@"preview_url"];
  DBUSERSTeam *ownerTeam =
      valueDict[@"owner_team"] ? [DBUSERSTeamSerializer deserialize:valueDict[@"owner_team"]] : nil;
  NSString *parentSharedFolderId = valueDict[@"parent_shared_folder_id"] ?: nil;
  NSString *pathLower = valueDict[@"path_lower"] ?: nil;
  NSArray<DBSHARINGFolderPermission *> *permissions =
      valueDict[@"permissions"] ? [DBArraySerializer deserialize:valueDict[@"permissions"]
                                                       withBlock:^id(id elem) {
                                                         return [DBSHARINGFolderPermissionSerializer deserialize:elem];
                                                       }]
                                : nil;

  return [[DBSHARINGSharedFolderMetadata alloc] initWithAccessType:accessType
                                                      isTeamFolder:isTeamFolder
                                                            policy:policy
                                                              name:name
                                                    sharedFolderId:sharedFolderId
                                                       timeInvited:timeInvited
                                                        previewUrl:previewUrl
                                                         ownerTeam:ownerTeam
                                              parentSharedFolderId:parentSharedFolderId
                                                         pathLower:pathLower
                                                       permissions:permissions];
}

@end
