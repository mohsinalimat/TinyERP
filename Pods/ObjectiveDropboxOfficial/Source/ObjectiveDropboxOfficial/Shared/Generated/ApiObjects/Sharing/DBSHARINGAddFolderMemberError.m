///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSHARINGAddFolderMemberError.h"
#import "DBSHARINGAddMemberSelectorError.h"
#import "DBSHARINGSharedFolderAccessError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGAddFolderMemberError

@synthesize accessError = _accessError;
@synthesize badMember = _badMember;
@synthesize tooManyMembers = _tooManyMembers;
@synthesize tooManyPendingInvites = _tooManyPendingInvites;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBSHARINGSharedFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithEmailUnverified {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorEmailUnverified;
  }
  return self;
}

- (instancetype)initWithBadMember:(DBSHARINGAddMemberSelectorError *)badMember {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorBadMember;
    _badMember = badMember;
  }
  return self;
}

- (instancetype)initWithCantShareOutsideTeam {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorCantShareOutsideTeam;
  }
  return self;
}

- (instancetype)initWithTooManyMembers:(NSNumber *)tooManyMembers {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorTooManyMembers;
    _tooManyMembers = tooManyMembers;
  }
  return self;
}

- (instancetype)initWithTooManyPendingInvites:(NSNumber *)tooManyPendingInvites {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorTooManyPendingInvites;
    _tooManyPendingInvites = tooManyPendingInvites;
  }
  return self;
}

- (instancetype)initWithRateLimit {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorRateLimit;
  }
  return self;
}

- (instancetype)initWithTooManyInvitees {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorTooManyInvitees;
  }
  return self;
}

- (instancetype)initWithInsufficientPlan {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorInsufficientPlan;
  }
  return self;
}

- (instancetype)initWithTeamFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorTeamFolder;
  }
  return self;
}

- (instancetype)initWithNoPermission {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorNoPermission;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharedFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGAddFolderMemberErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

- (DBSHARINGAddMemberSelectorError *)badMember {
  if (![self isBadMember]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGAddFolderMemberErrorBadMember, but was %@.", [self tagName]];
  }
  return _badMember;
}

- (NSNumber *)tooManyMembers {
  if (![self isTooManyMembers]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGAddFolderMemberErrorTooManyMembers, but was %@.", [self tagName]];
  }
  return _tooManyMembers;
}

- (NSNumber *)tooManyPendingInvites {
  if (![self isTooManyPendingInvites]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGAddFolderMemberErrorTooManyPendingInvites, but was %@.",
                       [self tagName]];
  }
  return _tooManyPendingInvites;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBSHARINGAddFolderMemberErrorAccessError;
}

- (BOOL)isEmailUnverified {
  return _tag == DBSHARINGAddFolderMemberErrorEmailUnverified;
}

- (BOOL)isBadMember {
  return _tag == DBSHARINGAddFolderMemberErrorBadMember;
}

- (BOOL)isCantShareOutsideTeam {
  return _tag == DBSHARINGAddFolderMemberErrorCantShareOutsideTeam;
}

- (BOOL)isTooManyMembers {
  return _tag == DBSHARINGAddFolderMemberErrorTooManyMembers;
}

- (BOOL)isTooManyPendingInvites {
  return _tag == DBSHARINGAddFolderMemberErrorTooManyPendingInvites;
}

- (BOOL)isRateLimit {
  return _tag == DBSHARINGAddFolderMemberErrorRateLimit;
}

- (BOOL)isTooManyInvitees {
  return _tag == DBSHARINGAddFolderMemberErrorTooManyInvitees;
}

- (BOOL)isInsufficientPlan {
  return _tag == DBSHARINGAddFolderMemberErrorInsufficientPlan;
}

- (BOOL)isTeamFolder {
  return _tag == DBSHARINGAddFolderMemberErrorTeamFolder;
}

- (BOOL)isNoPermission {
  return _tag == DBSHARINGAddFolderMemberErrorNoPermission;
}

- (BOOL)isOther {
  return _tag == DBSHARINGAddFolderMemberErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGAddFolderMemberErrorAccessError:
    return @"DBSHARINGAddFolderMemberErrorAccessError";
  case DBSHARINGAddFolderMemberErrorEmailUnverified:
    return @"DBSHARINGAddFolderMemberErrorEmailUnverified";
  case DBSHARINGAddFolderMemberErrorBadMember:
    return @"DBSHARINGAddFolderMemberErrorBadMember";
  case DBSHARINGAddFolderMemberErrorCantShareOutsideTeam:
    return @"DBSHARINGAddFolderMemberErrorCantShareOutsideTeam";
  case DBSHARINGAddFolderMemberErrorTooManyMembers:
    return @"DBSHARINGAddFolderMemberErrorTooManyMembers";
  case DBSHARINGAddFolderMemberErrorTooManyPendingInvites:
    return @"DBSHARINGAddFolderMemberErrorTooManyPendingInvites";
  case DBSHARINGAddFolderMemberErrorRateLimit:
    return @"DBSHARINGAddFolderMemberErrorRateLimit";
  case DBSHARINGAddFolderMemberErrorTooManyInvitees:
    return @"DBSHARINGAddFolderMemberErrorTooManyInvitees";
  case DBSHARINGAddFolderMemberErrorInsufficientPlan:
    return @"DBSHARINGAddFolderMemberErrorInsufficientPlan";
  case DBSHARINGAddFolderMemberErrorTeamFolder:
    return @"DBSHARINGAddFolderMemberErrorTeamFolder";
  case DBSHARINGAddFolderMemberErrorNoPermission:
    return @"DBSHARINGAddFolderMemberErrorNoPermission";
  case DBSHARINGAddFolderMemberErrorOther:
    return @"DBSHARINGAddFolderMemberErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGAddFolderMemberErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGAddFolderMemberErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGAddFolderMemberErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGAddFolderMemberErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGAddFolderMemberError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isEmailUnverified]) {
    jsonDict[@".tag"] = @"email_unverified";
  } else if ([valueObj isBadMember]) {
    jsonDict[@"bad_member"] = [[DBSHARINGAddMemberSelectorErrorSerializer serialize:valueObj.badMember] mutableCopy];
    jsonDict[@".tag"] = @"bad_member";
  } else if ([valueObj isCantShareOutsideTeam]) {
    jsonDict[@".tag"] = @"cant_share_outside_team";
  } else if ([valueObj isTooManyMembers]) {
    jsonDict[@"too_many_members"] = valueObj.tooManyMembers;
    jsonDict[@".tag"] = @"too_many_members";
  } else if ([valueObj isTooManyPendingInvites]) {
    jsonDict[@"too_many_pending_invites"] = valueObj.tooManyPendingInvites;
    jsonDict[@".tag"] = @"too_many_pending_invites";
  } else if ([valueObj isRateLimit]) {
    jsonDict[@".tag"] = @"rate_limit";
  } else if ([valueObj isTooManyInvitees]) {
    jsonDict[@".tag"] = @"too_many_invitees";
  } else if ([valueObj isInsufficientPlan]) {
    jsonDict[@".tag"] = @"insufficient_plan";
  } else if ([valueObj isTeamFolder]) {
    jsonDict[@".tag"] = @"team_folder";
  } else if ([valueObj isNoPermission]) {
    jsonDict[@".tag"] = @"no_permission";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGAddFolderMemberError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharedFolderAccessError *accessError =
        [DBSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGAddFolderMemberError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"email_unverified"]) {
    return [[DBSHARINGAddFolderMemberError alloc] initWithEmailUnverified];
  } else if ([tag isEqualToString:@"bad_member"]) {
    DBSHARINGAddMemberSelectorError *badMember =
        [DBSHARINGAddMemberSelectorErrorSerializer deserialize:valueDict[@"bad_member"]];
    return [[DBSHARINGAddFolderMemberError alloc] initWithBadMember:badMember];
  } else if ([tag isEqualToString:@"cant_share_outside_team"]) {
    return [[DBSHARINGAddFolderMemberError alloc] initWithCantShareOutsideTeam];
  } else if ([tag isEqualToString:@"too_many_members"]) {
    NSNumber *tooManyMembers = valueDict[@"too_many_members"];
    return [[DBSHARINGAddFolderMemberError alloc] initWithTooManyMembers:tooManyMembers];
  } else if ([tag isEqualToString:@"too_many_pending_invites"]) {
    NSNumber *tooManyPendingInvites = valueDict[@"too_many_pending_invites"];
    return [[DBSHARINGAddFolderMemberError alloc] initWithTooManyPendingInvites:tooManyPendingInvites];
  } else if ([tag isEqualToString:@"rate_limit"]) {
    return [[DBSHARINGAddFolderMemberError alloc] initWithRateLimit];
  } else if ([tag isEqualToString:@"too_many_invitees"]) {
    return [[DBSHARINGAddFolderMemberError alloc] initWithTooManyInvitees];
  } else if ([tag isEqualToString:@"insufficient_plan"]) {
    return [[DBSHARINGAddFolderMemberError alloc] initWithInsufficientPlan];
  } else if ([tag isEqualToString:@"team_folder"]) {
    return [[DBSHARINGAddFolderMemberError alloc] initWithTeamFolder];
  } else if ([tag isEqualToString:@"no_permission"]) {
    return [[DBSHARINGAddFolderMemberError alloc] initWithNoPermission];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGAddFolderMemberError alloc] initWithOther];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
