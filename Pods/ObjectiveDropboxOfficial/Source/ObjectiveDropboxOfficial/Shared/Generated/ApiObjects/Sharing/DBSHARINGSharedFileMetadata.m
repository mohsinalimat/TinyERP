///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSHARINGFilePermission.h"
#import "DBSHARINGFolderPolicy.h"
#import "DBSHARINGSharedFileMetadata.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSTeam.h"

#pragma mark - API Object

@implementation DBSHARINGSharedFileMetadata

#pragma mark - Constructors

- (instancetype)initWithPolicy:(DBSHARINGFolderPolicy *)policy
                    previewUrl:(NSString *)previewUrl
                          name:(NSString *)name
                           id_:(NSString *)id_
                   permissions:(NSArray<DBSHARINGFilePermission *> *)permissions
                     ownerTeam:(DBUSERSTeam *)ownerTeam
          parentSharedFolderId:(NSString *)parentSharedFolderId
                     pathLower:(NSString *)pathLower
                   pathDisplay:(NSString *)pathDisplay
                   timeInvited:(NSDate *)timeInvited {
  [DBStoneValidators stringValidator:@(1) maxLength:nil pattern:@"id:.*"](id_);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](permissions);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"]](
      parentSharedFolderId);

  self = [super init];
  if (self) {
    _policy = policy;
    _permissions = permissions;
    _ownerTeam = ownerTeam;
    _parentSharedFolderId = parentSharedFolderId;
    _previewUrl = previewUrl;
    _pathLower = pathLower;
    _pathDisplay = pathDisplay;
    _name = name;
    _id_ = id_;
    _timeInvited = timeInvited;
  }
  return self;
}

- (instancetype)initWithPolicy:(DBSHARINGFolderPolicy *)policy
                    previewUrl:(NSString *)previewUrl
                          name:(NSString *)name
                           id_:(NSString *)id_ {
  return [self initWithPolicy:policy
                   previewUrl:previewUrl
                         name:name
                          id_:id_
                  permissions:nil
                    ownerTeam:nil
         parentSharedFolderId:nil
                    pathLower:nil
                  pathDisplay:nil
                  timeInvited:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGSharedFileMetadataSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGSharedFileMetadataSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGSharedFileMetadataSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGSharedFileMetadataSerializer

+ (NSDictionary *)serialize:(DBSHARINGSharedFileMetadata *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"policy"] = [DBSHARINGFolderPolicySerializer serialize:valueObj.policy];
  jsonDict[@"preview_url"] = valueObj.previewUrl;
  jsonDict[@"name"] = valueObj.name;
  jsonDict[@"id"] = valueObj.id_;
  if (valueObj.permissions) {
    jsonDict[@"permissions"] = [DBArraySerializer serialize:valueObj.permissions
                                                  withBlock:^id(id elem) {
                                                    return [DBSHARINGFilePermissionSerializer serialize:elem];
                                                  }];
  }
  if (valueObj.ownerTeam) {
    jsonDict[@"owner_team"] = [DBUSERSTeamSerializer serialize:valueObj.ownerTeam];
  }
  if (valueObj.parentSharedFolderId) {
    jsonDict[@"parent_shared_folder_id"] = valueObj.parentSharedFolderId;
  }
  if (valueObj.pathLower) {
    jsonDict[@"path_lower"] = valueObj.pathLower;
  }
  if (valueObj.pathDisplay) {
    jsonDict[@"path_display"] = valueObj.pathDisplay;
  }
  if (valueObj.timeInvited) {
    jsonDict[@"time_invited"] = [DBNSDateSerializer serialize:valueObj.timeInvited dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }

  return jsonDict;
}

+ (DBSHARINGSharedFileMetadata *)deserialize:(NSDictionary *)valueDict {
  DBSHARINGFolderPolicy *policy = [DBSHARINGFolderPolicySerializer deserialize:valueDict[@"policy"]];
  NSString *previewUrl = valueDict[@"preview_url"];
  NSString *name = valueDict[@"name"];
  NSString *id_ = valueDict[@"id"];
  NSArray<DBSHARINGFilePermission *> *permissions =
      valueDict[@"permissions"] ? [DBArraySerializer deserialize:valueDict[@"permissions"]
                                                       withBlock:^id(id elem) {
                                                         return [DBSHARINGFilePermissionSerializer deserialize:elem];
                                                       }]
                                : nil;
  DBUSERSTeam *ownerTeam =
      valueDict[@"owner_team"] ? [DBUSERSTeamSerializer deserialize:valueDict[@"owner_team"]] : nil;
  NSString *parentSharedFolderId = valueDict[@"parent_shared_folder_id"] ?: nil;
  NSString *pathLower = valueDict[@"path_lower"] ?: nil;
  NSString *pathDisplay = valueDict[@"path_display"] ?: nil;
  NSDate *timeInvited = valueDict[@"time_invited"] ? [DBNSDateSerializer deserialize:valueDict[@"time_invited"]
                                                                          dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                                                   : nil;

  return [[DBSHARINGSharedFileMetadata alloc] initWithPolicy:policy
                                                  previewUrl:previewUrl
                                                        name:name
                                                         id_:id_
                                                 permissions:permissions
                                                   ownerTeam:ownerTeam
                                        parentSharedFolderId:parentSharedFolderId
                                                   pathLower:pathLower
                                                 pathDisplay:pathDisplay
                                                 timeInvited:timeInvited];
}

@end
