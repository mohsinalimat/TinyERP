///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSHARINGFolderAction.h"
#import "DBSHARINGListFoldersArgs.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListFoldersArgs

#pragma mark - Constructors

- (instancetype)initWithLimit:(NSNumber *)limit actions:(NSArray<DBSHARINGFolderAction *> *)actions {
  [DBStoneValidators numericValidator:@(1) maxValue:@(1000)](limit ?: @(1000));
  [DBStoneValidators nullableValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](actions);

  self = [super init];
  if (self) {
    _limit = limit ?: @(1000);
    _actions = actions;
  }
  return self;
}

- (instancetype)init {
  return [self initWithLimit:nil actions:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListFoldersArgsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListFoldersArgsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListFoldersArgsSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListFoldersArgsSerializer

+ (NSDictionary *)serialize:(DBSHARINGListFoldersArgs *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"limit"] = valueObj.limit;
  if (valueObj.actions) {
    jsonDict[@"actions"] = [DBArraySerializer serialize:valueObj.actions
                                              withBlock:^id(id elem) {
                                                return [DBSHARINGFolderActionSerializer serialize:elem];
                                              }];
  }

  return jsonDict;
}

+ (DBSHARINGListFoldersArgs *)deserialize:(NSDictionary *)valueDict {
  NSNumber *limit = valueDict[@"limit"] ?: @(1000);
  NSArray<DBSHARINGFolderAction *> *actions =
      valueDict[@"actions"] ? [DBArraySerializer deserialize:valueDict[@"actions"]
                                                   withBlock:^id(id elem) {
                                                     return [DBSHARINGFolderActionSerializer deserialize:elem];
                                                   }]
                            : nil;

  return [[DBSHARINGListFoldersArgs alloc] initWithLimit:limit actions:actions];
}

@end
