///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSHARINGSharedFolderAccessError.h"
#import "DBSHARINGUpdateFolderPolicyError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGUpdateFolderPolicyError

@synthesize accessError = _accessError;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBSHARINGSharedFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUpdateFolderPolicyErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithNotOnTeam {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUpdateFolderPolicyErrorNotOnTeam;
  }
  return self;
}

- (instancetype)initWithTeamPolicyDisallowsMemberPolicy {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUpdateFolderPolicyErrorTeamPolicyDisallowsMemberPolicy;
  }
  return self;
}

- (instancetype)initWithDisallowedSharedLinkPolicy {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUpdateFolderPolicyErrorDisallowedSharedLinkPolicy;
  }
  return self;
}

- (instancetype)initWithNoPermission {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUpdateFolderPolicyErrorNoPermission;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUpdateFolderPolicyErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharedFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGUpdateFolderPolicyErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBSHARINGUpdateFolderPolicyErrorAccessError;
}

- (BOOL)isNotOnTeam {
  return _tag == DBSHARINGUpdateFolderPolicyErrorNotOnTeam;
}

- (BOOL)isTeamPolicyDisallowsMemberPolicy {
  return _tag == DBSHARINGUpdateFolderPolicyErrorTeamPolicyDisallowsMemberPolicy;
}

- (BOOL)isDisallowedSharedLinkPolicy {
  return _tag == DBSHARINGUpdateFolderPolicyErrorDisallowedSharedLinkPolicy;
}

- (BOOL)isNoPermission {
  return _tag == DBSHARINGUpdateFolderPolicyErrorNoPermission;
}

- (BOOL)isOther {
  return _tag == DBSHARINGUpdateFolderPolicyErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGUpdateFolderPolicyErrorAccessError:
    return @"DBSHARINGUpdateFolderPolicyErrorAccessError";
  case DBSHARINGUpdateFolderPolicyErrorNotOnTeam:
    return @"DBSHARINGUpdateFolderPolicyErrorNotOnTeam";
  case DBSHARINGUpdateFolderPolicyErrorTeamPolicyDisallowsMemberPolicy:
    return @"DBSHARINGUpdateFolderPolicyErrorTeamPolicyDisallowsMemberPolicy";
  case DBSHARINGUpdateFolderPolicyErrorDisallowedSharedLinkPolicy:
    return @"DBSHARINGUpdateFolderPolicyErrorDisallowedSharedLinkPolicy";
  case DBSHARINGUpdateFolderPolicyErrorNoPermission:
    return @"DBSHARINGUpdateFolderPolicyErrorNoPermission";
  case DBSHARINGUpdateFolderPolicyErrorOther:
    return @"DBSHARINGUpdateFolderPolicyErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGUpdateFolderPolicyErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGUpdateFolderPolicyErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGUpdateFolderPolicyErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGUpdateFolderPolicyErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGUpdateFolderPolicyError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isNotOnTeam]) {
    jsonDict[@".tag"] = @"not_on_team";
  } else if ([valueObj isTeamPolicyDisallowsMemberPolicy]) {
    jsonDict[@".tag"] = @"team_policy_disallows_member_policy";
  } else if ([valueObj isDisallowedSharedLinkPolicy]) {
    jsonDict[@".tag"] = @"disallowed_shared_link_policy";
  } else if ([valueObj isNoPermission]) {
    jsonDict[@".tag"] = @"no_permission";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGUpdateFolderPolicyError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharedFolderAccessError *accessError =
        [DBSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGUpdateFolderPolicyError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"not_on_team"]) {
    return [[DBSHARINGUpdateFolderPolicyError alloc] initWithNotOnTeam];
  } else if ([tag isEqualToString:@"team_policy_disallows_member_policy"]) {
    return [[DBSHARINGUpdateFolderPolicyError alloc] initWithTeamPolicyDisallowsMemberPolicy];
  } else if ([tag isEqualToString:@"disallowed_shared_link_policy"]) {
    return [[DBSHARINGUpdateFolderPolicyError alloc] initWithDisallowedSharedLinkPolicy];
  } else if ([tag isEqualToString:@"no_permission"]) {
    return [[DBSHARINGUpdateFolderPolicyError alloc] initWithNoPermission];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGUpdateFolderPolicyError alloc] initWithOther];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
