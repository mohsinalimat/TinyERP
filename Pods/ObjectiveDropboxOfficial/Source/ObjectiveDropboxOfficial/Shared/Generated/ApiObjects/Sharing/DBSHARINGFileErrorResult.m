///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSHARINGFileErrorResult.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGFileErrorResult

@synthesize fileNotFoundError = _fileNotFoundError;
@synthesize invalidFileActionError = _invalidFileActionError;
@synthesize permissionDeniedError = _permissionDeniedError;

#pragma mark - Constructors

- (instancetype)initWithFileNotFoundError:(NSString *)fileNotFoundError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileErrorResultFileNotFoundError;
    _fileNotFoundError = fileNotFoundError;
  }
  return self;
}

- (instancetype)initWithInvalidFileActionError:(NSString *)invalidFileActionError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileErrorResultInvalidFileActionError;
    _invalidFileActionError = invalidFileActionError;
  }
  return self;
}

- (instancetype)initWithPermissionDeniedError:(NSString *)permissionDeniedError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileErrorResultPermissionDeniedError;
    _permissionDeniedError = permissionDeniedError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileErrorResultOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)fileNotFoundError {
  if (![self isFileNotFoundError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGFileErrorResultFileNotFoundError, but was %@.", [self tagName]];
  }
  return _fileNotFoundError;
}

- (NSString *)invalidFileActionError {
  if (![self isInvalidFileActionError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGFileErrorResultInvalidFileActionError, but was %@.", [self tagName]];
  }
  return _invalidFileActionError;
}

- (NSString *)permissionDeniedError {
  if (![self isPermissionDeniedError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGFileErrorResultPermissionDeniedError, but was %@.", [self tagName]];
  }
  return _permissionDeniedError;
}

#pragma mark - Tag state methods

- (BOOL)isFileNotFoundError {
  return _tag == DBSHARINGFileErrorResultFileNotFoundError;
}

- (BOOL)isInvalidFileActionError {
  return _tag == DBSHARINGFileErrorResultInvalidFileActionError;
}

- (BOOL)isPermissionDeniedError {
  return _tag == DBSHARINGFileErrorResultPermissionDeniedError;
}

- (BOOL)isOther {
  return _tag == DBSHARINGFileErrorResultOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGFileErrorResultFileNotFoundError:
    return @"DBSHARINGFileErrorResultFileNotFoundError";
  case DBSHARINGFileErrorResultInvalidFileActionError:
    return @"DBSHARINGFileErrorResultInvalidFileActionError";
  case DBSHARINGFileErrorResultPermissionDeniedError:
    return @"DBSHARINGFileErrorResultPermissionDeniedError";
  case DBSHARINGFileErrorResultOther:
    return @"DBSHARINGFileErrorResultOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGFileErrorResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGFileErrorResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGFileErrorResultSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGFileErrorResultSerializer

+ (NSDictionary *)serialize:(DBSHARINGFileErrorResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isFileNotFoundError]) {
    jsonDict[@"file_not_found_error"] = valueObj.fileNotFoundError;
    jsonDict[@".tag"] = @"file_not_found_error";
  } else if ([valueObj isInvalidFileActionError]) {
    jsonDict[@"invalid_file_action_error"] = valueObj.invalidFileActionError;
    jsonDict[@".tag"] = @"invalid_file_action_error";
  } else if ([valueObj isPermissionDeniedError]) {
    jsonDict[@"permission_denied_error"] = valueObj.permissionDeniedError;
    jsonDict[@".tag"] = @"permission_denied_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGFileErrorResult *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"file_not_found_error"]) {
    NSString *fileNotFoundError = valueDict[@"file_not_found_error"];
    return [[DBSHARINGFileErrorResult alloc] initWithFileNotFoundError:fileNotFoundError];
  } else if ([tag isEqualToString:@"invalid_file_action_error"]) {
    NSString *invalidFileActionError = valueDict[@"invalid_file_action_error"];
    return [[DBSHARINGFileErrorResult alloc] initWithInvalidFileActionError:invalidFileActionError];
  } else if ([tag isEqualToString:@"permission_denied_error"]) {
    NSString *permissionDeniedError = valueDict[@"permission_denied_error"];
    return [[DBSHARINGFileErrorResult alloc] initWithPermissionDeniedError:permissionDeniedError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGFileErrorResult alloc] initWithOther];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
