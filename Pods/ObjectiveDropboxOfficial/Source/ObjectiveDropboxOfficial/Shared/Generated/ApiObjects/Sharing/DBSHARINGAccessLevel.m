///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSHARINGAccessLevel.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGAccessLevel

#pragma mark - Constructors

- (instancetype)initWithOwner {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAccessLevelOwner;
  }
  return self;
}

- (instancetype)initWithEditor {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAccessLevelEditor;
  }
  return self;
}

- (instancetype)initWithViewer {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAccessLevelViewer;
  }
  return self;
}

- (instancetype)initWithViewerNoComment {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAccessLevelViewerNoComment;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAccessLevelOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isOwner {
  return _tag == DBSHARINGAccessLevelOwner;
}

- (BOOL)isEditor {
  return _tag == DBSHARINGAccessLevelEditor;
}

- (BOOL)isViewer {
  return _tag == DBSHARINGAccessLevelViewer;
}

- (BOOL)isViewerNoComment {
  return _tag == DBSHARINGAccessLevelViewerNoComment;
}

- (BOOL)isOther {
  return _tag == DBSHARINGAccessLevelOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGAccessLevelOwner:
    return @"DBSHARINGAccessLevelOwner";
  case DBSHARINGAccessLevelEditor:
    return @"DBSHARINGAccessLevelEditor";
  case DBSHARINGAccessLevelViewer:
    return @"DBSHARINGAccessLevelViewer";
  case DBSHARINGAccessLevelViewerNoComment:
    return @"DBSHARINGAccessLevelViewerNoComment";
  case DBSHARINGAccessLevelOther:
    return @"DBSHARINGAccessLevelOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGAccessLevelSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGAccessLevelSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGAccessLevelSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGAccessLevelSerializer

+ (NSDictionary *)serialize:(DBSHARINGAccessLevel *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isOwner]) {
    jsonDict[@".tag"] = @"owner";
  } else if ([valueObj isEditor]) {
    jsonDict[@".tag"] = @"editor";
  } else if ([valueObj isViewer]) {
    jsonDict[@".tag"] = @"viewer";
  } else if ([valueObj isViewerNoComment]) {
    jsonDict[@".tag"] = @"viewer_no_comment";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGAccessLevel *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"owner"]) {
    return [[DBSHARINGAccessLevel alloc] initWithOwner];
  } else if ([tag isEqualToString:@"editor"]) {
    return [[DBSHARINGAccessLevel alloc] initWithEditor];
  } else if ([tag isEqualToString:@"viewer"]) {
    return [[DBSHARINGAccessLevel alloc] initWithViewer];
  } else if ([tag isEqualToString:@"viewer_no_comment"]) {
    return [[DBSHARINGAccessLevel alloc] initWithViewerNoComment];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGAccessLevel alloc] initWithOther];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
