///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSHARINGAddFileMemberError.h"
#import "DBSHARINGSharingFileAccessError.h"
#import "DBSHARINGSharingUserError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGAddFileMemberError

@synthesize userError = _userError;
@synthesize accessError = _accessError;

#pragma mark - Constructors

- (instancetype)initWithUserError:(DBSHARINGSharingUserError *)userError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFileMemberErrorUserError;
    _userError = userError;
  }
  return self;
}

- (instancetype)initWithAccessError:(DBSHARINGSharingFileAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFileMemberErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithRateLimit {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFileMemberErrorRateLimit;
  }
  return self;
}

- (instancetype)initWithInvalidComment {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFileMemberErrorInvalidComment;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFileMemberErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharingUserError *)userError {
  if (![self isUserError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGAddFileMemberErrorUserError, but was %@.", [self tagName]];
  }
  return _userError;
}

- (DBSHARINGSharingFileAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGAddFileMemberErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

#pragma mark - Tag state methods

- (BOOL)isUserError {
  return _tag == DBSHARINGAddFileMemberErrorUserError;
}

- (BOOL)isAccessError {
  return _tag == DBSHARINGAddFileMemberErrorAccessError;
}

- (BOOL)isRateLimit {
  return _tag == DBSHARINGAddFileMemberErrorRateLimit;
}

- (BOOL)isInvalidComment {
  return _tag == DBSHARINGAddFileMemberErrorInvalidComment;
}

- (BOOL)isOther {
  return _tag == DBSHARINGAddFileMemberErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGAddFileMemberErrorUserError:
    return @"DBSHARINGAddFileMemberErrorUserError";
  case DBSHARINGAddFileMemberErrorAccessError:
    return @"DBSHARINGAddFileMemberErrorAccessError";
  case DBSHARINGAddFileMemberErrorRateLimit:
    return @"DBSHARINGAddFileMemberErrorRateLimit";
  case DBSHARINGAddFileMemberErrorInvalidComment:
    return @"DBSHARINGAddFileMemberErrorInvalidComment";
  case DBSHARINGAddFileMemberErrorOther:
    return @"DBSHARINGAddFileMemberErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGAddFileMemberErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGAddFileMemberErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGAddFileMemberErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGAddFileMemberErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGAddFileMemberError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserError]) {
    jsonDict[@"user_error"] = [[DBSHARINGSharingUserErrorSerializer serialize:valueObj.userError] mutableCopy];
    jsonDict[@".tag"] = @"user_error";
  } else if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharingFileAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isRateLimit]) {
    jsonDict[@".tag"] = @"rate_limit";
  } else if ([valueObj isInvalidComment]) {
    jsonDict[@".tag"] = @"invalid_comment";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGAddFileMemberError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_error"]) {
    DBSHARINGSharingUserError *userError = [DBSHARINGSharingUserErrorSerializer deserialize:valueDict[@"user_error"]];
    return [[DBSHARINGAddFileMemberError alloc] initWithUserError:userError];
  } else if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharingFileAccessError *accessError =
        [DBSHARINGSharingFileAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGAddFileMemberError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"rate_limit"]) {
    return [[DBSHARINGAddFileMemberError alloc] initWithRateLimit];
  } else if ([tag isEqualToString:@"invalid_comment"]) {
    return [[DBSHARINGAddFileMemberError alloc] initWithInvalidComment];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGAddFileMemberError alloc] initWithOther];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
