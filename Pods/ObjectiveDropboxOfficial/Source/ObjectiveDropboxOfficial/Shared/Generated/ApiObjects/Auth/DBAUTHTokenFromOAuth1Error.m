///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBAUTHTokenFromOAuth1Error.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBAUTHTokenFromOAuth1Error

#pragma mark - Constructors

- (instancetype)initWithInvalidOauth1TokenInfo {
  self = [super init];
  if (self) {
    _tag = DBAUTHTokenFromOAuth1ErrorInvalidOauth1TokenInfo;
  }
  return self;
}

- (instancetype)initWithAppIdMismatch {
  self = [super init];
  if (self) {
    _tag = DBAUTHTokenFromOAuth1ErrorAppIdMismatch;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBAUTHTokenFromOAuth1ErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isInvalidOauth1TokenInfo {
  return _tag == DBAUTHTokenFromOAuth1ErrorInvalidOauth1TokenInfo;
}

- (BOOL)isAppIdMismatch {
  return _tag == DBAUTHTokenFromOAuth1ErrorAppIdMismatch;
}

- (BOOL)isOther {
  return _tag == DBAUTHTokenFromOAuth1ErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBAUTHTokenFromOAuth1ErrorInvalidOauth1TokenInfo:
    return @"DBAUTHTokenFromOAuth1ErrorInvalidOauth1TokenInfo";
  case DBAUTHTokenFromOAuth1ErrorAppIdMismatch:
    return @"DBAUTHTokenFromOAuth1ErrorAppIdMismatch";
  case DBAUTHTokenFromOAuth1ErrorOther:
    return @"DBAUTHTokenFromOAuth1ErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBAUTHTokenFromOAuth1ErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBAUTHTokenFromOAuth1ErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBAUTHTokenFromOAuth1ErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBAUTHTokenFromOAuth1ErrorSerializer

+ (NSDictionary *)serialize:(DBAUTHTokenFromOAuth1Error *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalidOauth1TokenInfo]) {
    jsonDict[@".tag"] = @"invalid_oauth1_token_info";
  } else if ([valueObj isAppIdMismatch]) {
    jsonDict[@".tag"] = @"app_id_mismatch";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBAUTHTokenFromOAuth1Error *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid_oauth1_token_info"]) {
    return [[DBAUTHTokenFromOAuth1Error alloc] initWithInvalidOauth1TokenInfo];
  } else if ([tag isEqualToString:@"app_id_mismatch"]) {
    return [[DBAUTHTokenFromOAuth1Error alloc] initWithAppIdMismatch];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBAUTHTokenFromOAuth1Error alloc] initWithOther];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
