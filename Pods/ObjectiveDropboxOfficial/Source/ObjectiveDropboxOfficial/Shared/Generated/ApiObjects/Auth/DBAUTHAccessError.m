///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBAUTHAccessError.h"
#import "DBAUTHInvalidAccountTypeError.h"
#import "DBAUTHPaperAccessError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBAUTHAccessError

@synthesize invalidAccountType = _invalidAccountType;
@synthesize paperAccessDenied = _paperAccessDenied;

#pragma mark - Constructors

- (instancetype)initWithInvalidAccountType:(DBAUTHInvalidAccountTypeError *)invalidAccountType {
  self = [super init];
  if (self) {
    _tag = DBAUTHAccessErrorInvalidAccountType;
    _invalidAccountType = invalidAccountType;
  }
  return self;
}

- (instancetype)initWithPaperAccessDenied:(DBAUTHPaperAccessError *)paperAccessDenied {
  self = [super init];
  if (self) {
    _tag = DBAUTHAccessErrorPaperAccessDenied;
    _paperAccessDenied = paperAccessDenied;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBAUTHAccessErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBAUTHInvalidAccountTypeError *)invalidAccountType {
  if (![self isInvalidAccountType]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBAUTHAccessErrorInvalidAccountType, but was %@.", [self tagName]];
  }
  return _invalidAccountType;
}

- (DBAUTHPaperAccessError *)paperAccessDenied {
  if (![self isPaperAccessDenied]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBAUTHAccessErrorPaperAccessDenied, but was %@.", [self tagName]];
  }
  return _paperAccessDenied;
}

#pragma mark - Tag state methods

- (BOOL)isInvalidAccountType {
  return _tag == DBAUTHAccessErrorInvalidAccountType;
}

- (BOOL)isPaperAccessDenied {
  return _tag == DBAUTHAccessErrorPaperAccessDenied;
}

- (BOOL)isOther {
  return _tag == DBAUTHAccessErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBAUTHAccessErrorInvalidAccountType:
    return @"DBAUTHAccessErrorInvalidAccountType";
  case DBAUTHAccessErrorPaperAccessDenied:
    return @"DBAUTHAccessErrorPaperAccessDenied";
  case DBAUTHAccessErrorOther:
    return @"DBAUTHAccessErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBAUTHAccessErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBAUTHAccessErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBAUTHAccessErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBAUTHAccessErrorSerializer

+ (NSDictionary *)serialize:(DBAUTHAccessError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalidAccountType]) {
    jsonDict[@"invalid_account_type"] =
        [[DBAUTHInvalidAccountTypeErrorSerializer serialize:valueObj.invalidAccountType] mutableCopy];
    jsonDict[@".tag"] = @"invalid_account_type";
  } else if ([valueObj isPaperAccessDenied]) {
    jsonDict[@"paper_access_denied"] =
        [[DBAUTHPaperAccessErrorSerializer serialize:valueObj.paperAccessDenied] mutableCopy];
    jsonDict[@".tag"] = @"paper_access_denied";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBAUTHAccessError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid_account_type"]) {
    DBAUTHInvalidAccountTypeError *invalidAccountType =
        [DBAUTHInvalidAccountTypeErrorSerializer deserialize:valueDict[@"invalid_account_type"]];
    return [[DBAUTHAccessError alloc] initWithInvalidAccountType:invalidAccountType];
  } else if ([tag isEqualToString:@"paper_access_denied"]) {
    DBAUTHPaperAccessError *paperAccessDenied =
        [DBAUTHPaperAccessErrorSerializer deserialize:valueDict[@"paper_access_denied"]];
    return [[DBAUTHAccessError alloc] initWithPaperAccessDenied:paperAccessDenied];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBAUTHAccessError alloc] initWithOther];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
