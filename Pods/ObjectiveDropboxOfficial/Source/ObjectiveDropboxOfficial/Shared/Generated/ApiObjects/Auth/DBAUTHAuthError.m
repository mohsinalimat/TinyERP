///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBAUTHAuthError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBAUTHAuthError

#pragma mark - Constructors

- (instancetype)initWithInvalidAccessToken {
  self = [super init];
  if (self) {
    _tag = DBAUTHAuthErrorInvalidAccessToken;
  }
  return self;
}

- (instancetype)initWithInvalidSelectUser {
  self = [super init];
  if (self) {
    _tag = DBAUTHAuthErrorInvalidSelectUser;
  }
  return self;
}

- (instancetype)initWithInvalidSelectAdmin {
  self = [super init];
  if (self) {
    _tag = DBAUTHAuthErrorInvalidSelectAdmin;
  }
  return self;
}

- (instancetype)initWithUserSuspended {
  self = [super init];
  if (self) {
    _tag = DBAUTHAuthErrorUserSuspended;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBAUTHAuthErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isInvalidAccessToken {
  return _tag == DBAUTHAuthErrorInvalidAccessToken;
}

- (BOOL)isInvalidSelectUser {
  return _tag == DBAUTHAuthErrorInvalidSelectUser;
}

- (BOOL)isInvalidSelectAdmin {
  return _tag == DBAUTHAuthErrorInvalidSelectAdmin;
}

- (BOOL)isUserSuspended {
  return _tag == DBAUTHAuthErrorUserSuspended;
}

- (BOOL)isOther {
  return _tag == DBAUTHAuthErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBAUTHAuthErrorInvalidAccessToken:
    return @"DBAUTHAuthErrorInvalidAccessToken";
  case DBAUTHAuthErrorInvalidSelectUser:
    return @"DBAUTHAuthErrorInvalidSelectUser";
  case DBAUTHAuthErrorInvalidSelectAdmin:
    return @"DBAUTHAuthErrorInvalidSelectAdmin";
  case DBAUTHAuthErrorUserSuspended:
    return @"DBAUTHAuthErrorUserSuspended";
  case DBAUTHAuthErrorOther:
    return @"DBAUTHAuthErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBAUTHAuthErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBAUTHAuthErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBAUTHAuthErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBAUTHAuthErrorSerializer

+ (NSDictionary *)serialize:(DBAUTHAuthError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalidAccessToken]) {
    jsonDict[@".tag"] = @"invalid_access_token";
  } else if ([valueObj isInvalidSelectUser]) {
    jsonDict[@".tag"] = @"invalid_select_user";
  } else if ([valueObj isInvalidSelectAdmin]) {
    jsonDict[@".tag"] = @"invalid_select_admin";
  } else if ([valueObj isUserSuspended]) {
    jsonDict[@".tag"] = @"user_suspended";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBAUTHAuthError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid_access_token"]) {
    return [[DBAUTHAuthError alloc] initWithInvalidAccessToken];
  } else if ([tag isEqualToString:@"invalid_select_user"]) {
    return [[DBAUTHAuthError alloc] initWithInvalidSelectUser];
  } else if ([tag isEqualToString:@"invalid_select_admin"]) {
    return [[DBAUTHAuthError alloc] initWithInvalidSelectAdmin];
  } else if ([tag isEqualToString:@"user_suspended"]) {
    return [[DBAUTHAuthError alloc] initWithUserSuspended];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBAUTHAuthError alloc] initWithOther];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
