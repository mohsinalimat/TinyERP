///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBAUTHRateLimitError.h"
#import "DBAUTHRateLimitReason.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBAUTHRateLimitError

#pragma mark - Constructors

- (instancetype)initWithReason:(DBAUTHRateLimitReason *)reason retryAfter:(NSNumber *)retryAfter {

  self = [super init];
  if (self) {
    _reason = reason;
    _retryAfter = retryAfter ?: @(1);
  }
  return self;
}

- (instancetype)initWithReason:(DBAUTHRateLimitReason *)reason {
  return [self initWithReason:reason retryAfter:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBAUTHRateLimitErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBAUTHRateLimitErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBAUTHRateLimitErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBAUTHRateLimitErrorSerializer

+ (NSDictionary *)serialize:(DBAUTHRateLimitError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"reason"] = [DBAUTHRateLimitReasonSerializer serialize:valueObj.reason];
  jsonDict[@"retry_after"] = valueObj.retryAfter;

  return jsonDict;
}

+ (DBAUTHRateLimitError *)deserialize:(NSDictionary *)valueDict {
  DBAUTHRateLimitReason *reason = [DBAUTHRateLimitReasonSerializer deserialize:valueDict[@"reason"]];
  NSNumber *retryAfter = valueDict[@"retry_after"] ?: @(1);

  return [[DBAUTHRateLimitError alloc] initWithReason:reason retryAfter:retryAfter];
}

@end
