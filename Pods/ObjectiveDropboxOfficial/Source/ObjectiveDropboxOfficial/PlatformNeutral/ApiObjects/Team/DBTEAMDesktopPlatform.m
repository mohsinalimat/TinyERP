///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMDesktopPlatform.h"

#pragma mark - API Object

@implementation DBTEAMDesktopPlatform

#pragma mark - Constructors

- (instancetype)initWithWindows {
  self = [super init];
  if (self) {
    _tag = DBTEAMDesktopPlatformWindows;
  }
  return self;
}

- (instancetype)initWithMac {
  self = [super init];
  if (self) {
    _tag = DBTEAMDesktopPlatformMac;
  }
  return self;
}

- (instancetype)initWithLinux {
  self = [super init];
  if (self) {
    _tag = DBTEAMDesktopPlatformLinux;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMDesktopPlatformOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isWindows {
  return _tag == DBTEAMDesktopPlatformWindows;
}

- (BOOL)isMac {
  return _tag == DBTEAMDesktopPlatformMac;
}

- (BOOL)isLinux {
  return _tag == DBTEAMDesktopPlatformLinux;
}

- (BOOL)isOther {
  return _tag == DBTEAMDesktopPlatformOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMDesktopPlatformWindows:
    return @"DBTEAMDesktopPlatformWindows";
  case DBTEAMDesktopPlatformMac:
    return @"DBTEAMDesktopPlatformMac";
  case DBTEAMDesktopPlatformLinux:
    return @"DBTEAMDesktopPlatformLinux";
  case DBTEAMDesktopPlatformOther:
    return @"DBTEAMDesktopPlatformOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMDesktopPlatformSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMDesktopPlatformSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMDesktopPlatformSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMDesktopPlatformSerializer

+ (NSDictionary *)serialize:(DBTEAMDesktopPlatform *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isWindows]) {
    jsonDict[@".tag"] = @"windows";
  } else if ([valueObj isMac]) {
    jsonDict[@".tag"] = @"mac";
  } else if ([valueObj isLinux]) {
    jsonDict[@".tag"] = @"linux";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBTEAMDesktopPlatform *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"windows"]) {
    return [[DBTEAMDesktopPlatform alloc] initWithWindows];
  } else if ([tag isEqualToString:@"mac"]) {
    return [[DBTEAMDesktopPlatform alloc] initWithMac];
  } else if ([tag isEqualToString:@"linux"]) {
    return [[DBTEAMDesktopPlatform alloc] initWithLinux];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMDesktopPlatform alloc] initWithOther];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
