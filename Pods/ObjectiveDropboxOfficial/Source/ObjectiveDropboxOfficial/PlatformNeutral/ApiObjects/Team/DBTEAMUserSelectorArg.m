///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMUserSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMUserSelectorArg

@synthesize teamMemberId = _teamMemberId;
@synthesize externalId = _externalId;
@synthesize email = _email;

#pragma mark - Constructors

- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId {
  self = [super init];
  if (self) {
    _tag = DBTEAMUserSelectorArgTeamMemberId;
    _teamMemberId = teamMemberId;
  }
  return self;
}

- (instancetype)initWithExternalId:(NSString *)externalId {
  self = [super init];
  if (self) {
    _tag = DBTEAMUserSelectorArgExternalId;
    _externalId = externalId;
  }
  return self;
}

- (instancetype)initWithEmail:(NSString *)email {
  self = [super init];
  if (self) {
    _tag = DBTEAMUserSelectorArgEmail;
    _email = email;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)teamMemberId {
  if (![self isTeamMemberId]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMUserSelectorArgTeamMemberId, but was %@.", [self tagName]];
  }
  return _teamMemberId;
}

- (NSString *)externalId {
  if (![self isExternalId]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMUserSelectorArgExternalId, but was %@.", [self tagName]];
  }
  return _externalId;
}

- (NSString *)email {
  if (![self isEmail]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMUserSelectorArgEmail, but was %@.", [self tagName]];
  }
  return _email;
}

#pragma mark - Tag state methods

- (BOOL)isTeamMemberId {
  return _tag == DBTEAMUserSelectorArgTeamMemberId;
}

- (BOOL)isExternalId {
  return _tag == DBTEAMUserSelectorArgExternalId;
}

- (BOOL)isEmail {
  return _tag == DBTEAMUserSelectorArgEmail;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMUserSelectorArgTeamMemberId:
    return @"DBTEAMUserSelectorArgTeamMemberId";
  case DBTEAMUserSelectorArgExternalId:
    return @"DBTEAMUserSelectorArgExternalId";
  case DBTEAMUserSelectorArgEmail:
    return @"DBTEAMUserSelectorArgEmail";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMUserSelectorArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMUserSelectorArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMUserSelectorArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMUserSelectorArgSerializer

+ (NSDictionary *)serialize:(DBTEAMUserSelectorArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isTeamMemberId]) {
    jsonDict[@"team_member_id"] = valueObj.teamMemberId;
    jsonDict[@".tag"] = @"team_member_id";
  } else if ([valueObj isExternalId]) {
    jsonDict[@"external_id"] = valueObj.externalId;
    jsonDict[@".tag"] = @"external_id";
  } else if ([valueObj isEmail]) {
    jsonDict[@"email"] = valueObj.email;
    jsonDict[@".tag"] = @"email";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBTEAMUserSelectorArg *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"team_member_id"]) {
    NSString *teamMemberId = valueDict[@"team_member_id"];
    return [[DBTEAMUserSelectorArg alloc] initWithTeamMemberId:teamMemberId];
  } else if ([tag isEqualToString:@"external_id"]) {
    NSString *externalId = valueDict[@"external_id"];
    return [[DBTEAMUserSelectorArg alloc] initWithExternalId:externalId];
  } else if ([tag isEqualToString:@"email"]) {
    NSString *email = valueDict[@"email"];
    return [[DBTEAMUserSelectorArg alloc] initWithEmail:email];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
