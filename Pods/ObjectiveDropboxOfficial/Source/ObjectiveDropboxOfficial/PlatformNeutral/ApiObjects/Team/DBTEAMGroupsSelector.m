///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupsSelector.h"

#pragma mark - API Object

@implementation DBTEAMGroupsSelector

@synthesize groupIds = _groupIds;
@synthesize groupExternalIds = _groupExternalIds;

#pragma mark - Constructors

- (instancetype)initWithGroupIds:(NSArray<NSString *> *)groupIds {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupsSelectorGroupIds;
    _groupIds = groupIds;
  }
  return self;
}

- (instancetype)initWithGroupExternalIds:(NSArray<NSString *> *)groupExternalIds {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupsSelectorGroupExternalIds;
    _groupExternalIds = groupExternalIds;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSArray<NSString *> *)groupIds {
  if (![self isGroupIds]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMGroupsSelectorGroupIds, but was %@.", [self tagName]];
  }
  return _groupIds;
}

- (NSArray<NSString *> *)groupExternalIds {
  if (![self isGroupExternalIds]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMGroupsSelectorGroupExternalIds, but was %@.", [self tagName]];
  }
  return _groupExternalIds;
}

#pragma mark - Tag state methods

- (BOOL)isGroupIds {
  return _tag == DBTEAMGroupsSelectorGroupIds;
}

- (BOOL)isGroupExternalIds {
  return _tag == DBTEAMGroupsSelectorGroupExternalIds;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMGroupsSelectorGroupIds:
    return @"DBTEAMGroupsSelectorGroupIds";
  case DBTEAMGroupsSelectorGroupExternalIds:
    return @"DBTEAMGroupsSelectorGroupExternalIds";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMGroupsSelectorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMGroupsSelectorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupsSelectorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupsSelectorSerializer

+ (NSDictionary *)serialize:(DBTEAMGroupsSelector *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isGroupIds]) {
    jsonDict[@"group_ids"] = [DBArraySerializer serialize:valueObj.groupIds
                                                withBlock:^id(id elem) {
                                                  return elem;
                                                }];
    jsonDict[@".tag"] = @"group_ids";
  } else if ([valueObj isGroupExternalIds]) {
    jsonDict[@"group_external_ids"] = [DBArraySerializer serialize:valueObj.groupExternalIds
                                                         withBlock:^id(id elem) {
                                                           return elem;
                                                         }];
    jsonDict[@".tag"] = @"group_external_ids";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBTEAMGroupsSelector *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"group_ids"]) {
    NSArray<NSString *> *groupIds = [DBArraySerializer deserialize:valueDict[@"group_ids"]
                                                         withBlock:^id(id elem) {
                                                           return elem;
                                                         }];
    return [[DBTEAMGroupsSelector alloc] initWithGroupIds:groupIds];
  } else if ([tag isEqualToString:@"group_external_ids"]) {
    NSArray<NSString *> *groupExternalIds = [DBArraySerializer deserialize:valueDict[@"group_external_ids"]
                                                                 withBlock:^id(id elem) {
                                                                   return elem;
                                                                 }];
    return [[DBTEAMGroupsSelector alloc] initWithGroupExternalIds:groupExternalIds];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
