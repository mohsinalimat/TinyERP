///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMemberAddResult.h"
#import "DBTEAMTeamMemberInfo.h"

#pragma mark - API Object

@implementation DBTEAMMemberAddResult

@synthesize success = _success;
@synthesize teamLicenseLimit = _teamLicenseLimit;
@synthesize freeTeamMemberLimitReached = _freeTeamMemberLimitReached;
@synthesize userAlreadyOnTeam = _userAlreadyOnTeam;
@synthesize userOnAnotherTeam = _userOnAnotherTeam;
@synthesize userAlreadyPaired = _userAlreadyPaired;
@synthesize userMigrationFailed = _userMigrationFailed;
@synthesize duplicateExternalMemberId = _duplicateExternalMemberId;
@synthesize userCreationFailed = _userCreationFailed;

#pragma mark - Constructors

- (instancetype)initWithSuccess:(DBTEAMTeamMemberInfo *)success {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberAddResultSuccess;
    _success = success;
  }
  return self;
}

- (instancetype)initWithTeamLicenseLimit:(NSString *)teamLicenseLimit {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberAddResultTeamLicenseLimit;
    _teamLicenseLimit = teamLicenseLimit;
  }
  return self;
}

- (instancetype)initWithFreeTeamMemberLimitReached:(NSString *)freeTeamMemberLimitReached {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberAddResultFreeTeamMemberLimitReached;
    _freeTeamMemberLimitReached = freeTeamMemberLimitReached;
  }
  return self;
}

- (instancetype)initWithUserAlreadyOnTeam:(NSString *)userAlreadyOnTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberAddResultUserAlreadyOnTeam;
    _userAlreadyOnTeam = userAlreadyOnTeam;
  }
  return self;
}

- (instancetype)initWithUserOnAnotherTeam:(NSString *)userOnAnotherTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberAddResultUserOnAnotherTeam;
    _userOnAnotherTeam = userOnAnotherTeam;
  }
  return self;
}

- (instancetype)initWithUserAlreadyPaired:(NSString *)userAlreadyPaired {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberAddResultUserAlreadyPaired;
    _userAlreadyPaired = userAlreadyPaired;
  }
  return self;
}

- (instancetype)initWithUserMigrationFailed:(NSString *)userMigrationFailed {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberAddResultUserMigrationFailed;
    _userMigrationFailed = userMigrationFailed;
  }
  return self;
}

- (instancetype)initWithDuplicateExternalMemberId:(NSString *)duplicateExternalMemberId {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberAddResultDuplicateExternalMemberId;
    _duplicateExternalMemberId = duplicateExternalMemberId;
  }
  return self;
}

- (instancetype)initWithUserCreationFailed:(NSString *)userCreationFailed {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberAddResultUserCreationFailed;
    _userCreationFailed = userCreationFailed;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMTeamMemberInfo *)success {
  if (![self isSuccess]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMMemberAddResultSuccess, but was %@.", [self tagName]];
  }
  return _success;
}

- (NSString *)teamLicenseLimit {
  if (![self isTeamLicenseLimit]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMMemberAddResultTeamLicenseLimit, but was %@.", [self tagName]];
  }
  return _teamLicenseLimit;
}

- (NSString *)freeTeamMemberLimitReached {
  if (![self isFreeTeamMemberLimitReached]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMMemberAddResultFreeTeamMemberLimitReached, but was %@.", [self tagName]];
  }
  return _freeTeamMemberLimitReached;
}

- (NSString *)userAlreadyOnTeam {
  if (![self isUserAlreadyOnTeam]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMMemberAddResultUserAlreadyOnTeam, but was %@.", [self tagName]];
  }
  return _userAlreadyOnTeam;
}

- (NSString *)userOnAnotherTeam {
  if (![self isUserOnAnotherTeam]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMMemberAddResultUserOnAnotherTeam, but was %@.", [self tagName]];
  }
  return _userOnAnotherTeam;
}

- (NSString *)userAlreadyPaired {
  if (![self isUserAlreadyPaired]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMMemberAddResultUserAlreadyPaired, but was %@.", [self tagName]];
  }
  return _userAlreadyPaired;
}

- (NSString *)userMigrationFailed {
  if (![self isUserMigrationFailed]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMMemberAddResultUserMigrationFailed, but was %@.", [self tagName]];
  }
  return _userMigrationFailed;
}

- (NSString *)duplicateExternalMemberId {
  if (![self isDuplicateExternalMemberId]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMMemberAddResultDuplicateExternalMemberId, but was %@.", [self tagName]];
  }
  return _duplicateExternalMemberId;
}

- (NSString *)userCreationFailed {
  if (![self isUserCreationFailed]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMMemberAddResultUserCreationFailed, but was %@.", [self tagName]];
  }
  return _userCreationFailed;
}

#pragma mark - Tag state methods

- (BOOL)isSuccess {
  return _tag == DBTEAMMemberAddResultSuccess;
}

- (BOOL)isTeamLicenseLimit {
  return _tag == DBTEAMMemberAddResultTeamLicenseLimit;
}

- (BOOL)isFreeTeamMemberLimitReached {
  return _tag == DBTEAMMemberAddResultFreeTeamMemberLimitReached;
}

- (BOOL)isUserAlreadyOnTeam {
  return _tag == DBTEAMMemberAddResultUserAlreadyOnTeam;
}

- (BOOL)isUserOnAnotherTeam {
  return _tag == DBTEAMMemberAddResultUserOnAnotherTeam;
}

- (BOOL)isUserAlreadyPaired {
  return _tag == DBTEAMMemberAddResultUserAlreadyPaired;
}

- (BOOL)isUserMigrationFailed {
  return _tag == DBTEAMMemberAddResultUserMigrationFailed;
}

- (BOOL)isDuplicateExternalMemberId {
  return _tag == DBTEAMMemberAddResultDuplicateExternalMemberId;
}

- (BOOL)isUserCreationFailed {
  return _tag == DBTEAMMemberAddResultUserCreationFailed;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMMemberAddResultSuccess:
    return @"DBTEAMMemberAddResultSuccess";
  case DBTEAMMemberAddResultTeamLicenseLimit:
    return @"DBTEAMMemberAddResultTeamLicenseLimit";
  case DBTEAMMemberAddResultFreeTeamMemberLimitReached:
    return @"DBTEAMMemberAddResultFreeTeamMemberLimitReached";
  case DBTEAMMemberAddResultUserAlreadyOnTeam:
    return @"DBTEAMMemberAddResultUserAlreadyOnTeam";
  case DBTEAMMemberAddResultUserOnAnotherTeam:
    return @"DBTEAMMemberAddResultUserOnAnotherTeam";
  case DBTEAMMemberAddResultUserAlreadyPaired:
    return @"DBTEAMMemberAddResultUserAlreadyPaired";
  case DBTEAMMemberAddResultUserMigrationFailed:
    return @"DBTEAMMemberAddResultUserMigrationFailed";
  case DBTEAMMemberAddResultDuplicateExternalMemberId:
    return @"DBTEAMMemberAddResultDuplicateExternalMemberId";
  case DBTEAMMemberAddResultUserCreationFailed:
    return @"DBTEAMMemberAddResultUserCreationFailed";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMMemberAddResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMMemberAddResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMemberAddResultSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMemberAddResultSerializer

+ (NSDictionary *)serialize:(DBTEAMMemberAddResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isSuccess]) {
    jsonDict[@"success"] = [[DBTEAMTeamMemberInfoSerializer serialize:valueObj.success] mutableCopy];
    jsonDict[@".tag"] = @"success";
  } else if ([valueObj isTeamLicenseLimit]) {
    jsonDict[@"team_license_limit"] = valueObj.teamLicenseLimit;
    jsonDict[@".tag"] = @"team_license_limit";
  } else if ([valueObj isFreeTeamMemberLimitReached]) {
    jsonDict[@"free_team_member_limit_reached"] = valueObj.freeTeamMemberLimitReached;
    jsonDict[@".tag"] = @"free_team_member_limit_reached";
  } else if ([valueObj isUserAlreadyOnTeam]) {
    jsonDict[@"user_already_on_team"] = valueObj.userAlreadyOnTeam;
    jsonDict[@".tag"] = @"user_already_on_team";
  } else if ([valueObj isUserOnAnotherTeam]) {
    jsonDict[@"user_on_another_team"] = valueObj.userOnAnotherTeam;
    jsonDict[@".tag"] = @"user_on_another_team";
  } else if ([valueObj isUserAlreadyPaired]) {
    jsonDict[@"user_already_paired"] = valueObj.userAlreadyPaired;
    jsonDict[@".tag"] = @"user_already_paired";
  } else if ([valueObj isUserMigrationFailed]) {
    jsonDict[@"user_migration_failed"] = valueObj.userMigrationFailed;
    jsonDict[@".tag"] = @"user_migration_failed";
  } else if ([valueObj isDuplicateExternalMemberId]) {
    jsonDict[@"duplicate_external_member_id"] = valueObj.duplicateExternalMemberId;
    jsonDict[@".tag"] = @"duplicate_external_member_id";
  } else if ([valueObj isUserCreationFailed]) {
    jsonDict[@"user_creation_failed"] = valueObj.userCreationFailed;
    jsonDict[@".tag"] = @"user_creation_failed";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBTEAMMemberAddResult *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"success"]) {
    DBTEAMTeamMemberInfo *success = [DBTEAMTeamMemberInfoSerializer deserialize:valueDict];
    return [[DBTEAMMemberAddResult alloc] initWithSuccess:success];
  } else if ([tag isEqualToString:@"team_license_limit"]) {
    NSString *teamLicenseLimit = valueDict[@"team_license_limit"];
    return [[DBTEAMMemberAddResult alloc] initWithTeamLicenseLimit:teamLicenseLimit];
  } else if ([tag isEqualToString:@"free_team_member_limit_reached"]) {
    NSString *freeTeamMemberLimitReached = valueDict[@"free_team_member_limit_reached"];
    return [[DBTEAMMemberAddResult alloc] initWithFreeTeamMemberLimitReached:freeTeamMemberLimitReached];
  } else if ([tag isEqualToString:@"user_already_on_team"]) {
    NSString *userAlreadyOnTeam = valueDict[@"user_already_on_team"];
    return [[DBTEAMMemberAddResult alloc] initWithUserAlreadyOnTeam:userAlreadyOnTeam];
  } else if ([tag isEqualToString:@"user_on_another_team"]) {
    NSString *userOnAnotherTeam = valueDict[@"user_on_another_team"];
    return [[DBTEAMMemberAddResult alloc] initWithUserOnAnotherTeam:userOnAnotherTeam];
  } else if ([tag isEqualToString:@"user_already_paired"]) {
    NSString *userAlreadyPaired = valueDict[@"user_already_paired"];
    return [[DBTEAMMemberAddResult alloc] initWithUserAlreadyPaired:userAlreadyPaired];
  } else if ([tag isEqualToString:@"user_migration_failed"]) {
    NSString *userMigrationFailed = valueDict[@"user_migration_failed"];
    return [[DBTEAMMemberAddResult alloc] initWithUserMigrationFailed:userMigrationFailed];
  } else if ([tag isEqualToString:@"duplicate_external_member_id"]) {
    NSString *duplicateExternalMemberId = valueDict[@"duplicate_external_member_id"];
    return [[DBTEAMMemberAddResult alloc] initWithDuplicateExternalMemberId:duplicateExternalMemberId];
  } else if ([tag isEqualToString:@"user_creation_failed"]) {
    NSString *userCreationFailed = valueDict[@"user_creation_failed"];
    return [[DBTEAMMemberAddResult alloc] initWithUserCreationFailed:userCreationFailed];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
