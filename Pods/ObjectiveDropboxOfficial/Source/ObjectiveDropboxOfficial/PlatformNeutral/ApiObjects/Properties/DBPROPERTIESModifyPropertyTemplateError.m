///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBPROPERTIESModifyPropertyTemplateError.h"
#import "DBPROPERTIESPropertyTemplateError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBPROPERTIESModifyPropertyTemplateError

@synthesize templateNotFound = _templateNotFound;

#pragma mark - Constructors

- (instancetype)initWithTemplateNotFound:(NSString *)templateNotFound {
  self = [super init];
  if (self) {
    _tag = DBPROPERTIESModifyPropertyTemplateErrorTemplateNotFound;
    _templateNotFound = templateNotFound;
  }
  return self;
}

- (instancetype)initWithRestrictedContent {
  self = [super init];
  if (self) {
    _tag = DBPROPERTIESModifyPropertyTemplateErrorRestrictedContent;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBPROPERTIESModifyPropertyTemplateErrorOther;
  }
  return self;
}

- (instancetype)initWithConflictingPropertyNames {
  self = [super init];
  if (self) {
    _tag = DBPROPERTIESModifyPropertyTemplateErrorConflictingPropertyNames;
  }
  return self;
}

- (instancetype)initWithTooManyProperties {
  self = [super init];
  if (self) {
    _tag = DBPROPERTIESModifyPropertyTemplateErrorTooManyProperties;
  }
  return self;
}

- (instancetype)initWithTooManyTemplates {
  self = [super init];
  if (self) {
    _tag = DBPROPERTIESModifyPropertyTemplateErrorTooManyTemplates;
  }
  return self;
}

- (instancetype)initWithTemplateAttributeTooLarge {
  self = [super init];
  if (self) {
    _tag = DBPROPERTIESModifyPropertyTemplateErrorTemplateAttributeTooLarge;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)templateNotFound {
  if (![self isTemplateNotFound]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBPROPERTIESModifyPropertyTemplateErrorTemplateNotFound, but was %@.",
                       [self tagName]];
  }
  return _templateNotFound;
}

#pragma mark - Tag state methods

- (BOOL)isTemplateNotFound {
  return _tag == DBPROPERTIESModifyPropertyTemplateErrorTemplateNotFound;
}

- (BOOL)isRestrictedContent {
  return _tag == DBPROPERTIESModifyPropertyTemplateErrorRestrictedContent;
}

- (BOOL)isOther {
  return _tag == DBPROPERTIESModifyPropertyTemplateErrorOther;
}

- (BOOL)isConflictingPropertyNames {
  return _tag == DBPROPERTIESModifyPropertyTemplateErrorConflictingPropertyNames;
}

- (BOOL)isTooManyProperties {
  return _tag == DBPROPERTIESModifyPropertyTemplateErrorTooManyProperties;
}

- (BOOL)isTooManyTemplates {
  return _tag == DBPROPERTIESModifyPropertyTemplateErrorTooManyTemplates;
}

- (BOOL)isTemplateAttributeTooLarge {
  return _tag == DBPROPERTIESModifyPropertyTemplateErrorTemplateAttributeTooLarge;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBPROPERTIESModifyPropertyTemplateErrorTemplateNotFound:
    return @"DBPROPERTIESModifyPropertyTemplateErrorTemplateNotFound";
  case DBPROPERTIESModifyPropertyTemplateErrorRestrictedContent:
    return @"DBPROPERTIESModifyPropertyTemplateErrorRestrictedContent";
  case DBPROPERTIESModifyPropertyTemplateErrorOther:
    return @"DBPROPERTIESModifyPropertyTemplateErrorOther";
  case DBPROPERTIESModifyPropertyTemplateErrorConflictingPropertyNames:
    return @"DBPROPERTIESModifyPropertyTemplateErrorConflictingPropertyNames";
  case DBPROPERTIESModifyPropertyTemplateErrorTooManyProperties:
    return @"DBPROPERTIESModifyPropertyTemplateErrorTooManyProperties";
  case DBPROPERTIESModifyPropertyTemplateErrorTooManyTemplates:
    return @"DBPROPERTIESModifyPropertyTemplateErrorTooManyTemplates";
  case DBPROPERTIESModifyPropertyTemplateErrorTemplateAttributeTooLarge:
    return @"DBPROPERTIESModifyPropertyTemplateErrorTemplateAttributeTooLarge";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBPROPERTIESModifyPropertyTemplateErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBPROPERTIESModifyPropertyTemplateErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBPROPERTIESModifyPropertyTemplateErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBPROPERTIESModifyPropertyTemplateErrorSerializer

+ (NSDictionary *)serialize:(DBPROPERTIESModifyPropertyTemplateError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isTemplateNotFound]) {
    jsonDict[@"template_not_found"] = valueObj.templateNotFound;
    jsonDict[@".tag"] = @"template_not_found";
  } else if ([valueObj isRestrictedContent]) {
    jsonDict[@".tag"] = @"restricted_content";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isConflictingPropertyNames]) {
    jsonDict[@".tag"] = @"conflicting_property_names";
  } else if ([valueObj isTooManyProperties]) {
    jsonDict[@".tag"] = @"too_many_properties";
  } else if ([valueObj isTooManyTemplates]) {
    jsonDict[@".tag"] = @"too_many_templates";
  } else if ([valueObj isTemplateAttributeTooLarge]) {
    jsonDict[@".tag"] = @"template_attribute_too_large";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBPROPERTIESModifyPropertyTemplateError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"template_not_found"]) {
    NSString *templateNotFound = valueDict[@"template_not_found"];
    return [[DBPROPERTIESModifyPropertyTemplateError alloc] initWithTemplateNotFound:templateNotFound];
  } else if ([tag isEqualToString:@"restricted_content"]) {
    return [[DBPROPERTIESModifyPropertyTemplateError alloc] initWithRestrictedContent];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBPROPERTIESModifyPropertyTemplateError alloc] initWithOther];
  } else if ([tag isEqualToString:@"conflicting_property_names"]) {
    return [[DBPROPERTIESModifyPropertyTemplateError alloc] initWithConflictingPropertyNames];
  } else if ([tag isEqualToString:@"too_many_properties"]) {
    return [[DBPROPERTIESModifyPropertyTemplateError alloc] initWithTooManyProperties];
  } else if ([tag isEqualToString:@"too_many_templates"]) {
    return [[DBPROPERTIESModifyPropertyTemplateError alloc] initWithTooManyTemplates];
  } else if ([tag isEqualToString:@"template_attribute_too_large"]) {
    return [[DBPROPERTIESModifyPropertyTemplateError alloc] initWithTemplateAttributeTooLarge];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
