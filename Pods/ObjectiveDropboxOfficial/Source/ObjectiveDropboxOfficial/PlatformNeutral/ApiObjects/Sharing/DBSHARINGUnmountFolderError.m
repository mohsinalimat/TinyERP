///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSHARINGSharedFolderAccessError.h"
#import "DBSHARINGUnmountFolderError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGUnmountFolderError

@synthesize accessError = _accessError;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBSHARINGSharedFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUnmountFolderErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithNoPermission {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUnmountFolderErrorNoPermission;
  }
  return self;
}

- (instancetype)initWithNotUnmountable {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUnmountFolderErrorNotUnmountable;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUnmountFolderErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharedFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGUnmountFolderErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBSHARINGUnmountFolderErrorAccessError;
}

- (BOOL)isNoPermission {
  return _tag == DBSHARINGUnmountFolderErrorNoPermission;
}

- (BOOL)isNotUnmountable {
  return _tag == DBSHARINGUnmountFolderErrorNotUnmountable;
}

- (BOOL)isOther {
  return _tag == DBSHARINGUnmountFolderErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGUnmountFolderErrorAccessError:
    return @"DBSHARINGUnmountFolderErrorAccessError";
  case DBSHARINGUnmountFolderErrorNoPermission:
    return @"DBSHARINGUnmountFolderErrorNoPermission";
  case DBSHARINGUnmountFolderErrorNotUnmountable:
    return @"DBSHARINGUnmountFolderErrorNotUnmountable";
  case DBSHARINGUnmountFolderErrorOther:
    return @"DBSHARINGUnmountFolderErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGUnmountFolderErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGUnmountFolderErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGUnmountFolderErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGUnmountFolderErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGUnmountFolderError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isNoPermission]) {
    jsonDict[@".tag"] = @"no_permission";
  } else if ([valueObj isNotUnmountable]) {
    jsonDict[@".tag"] = @"not_unmountable";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGUnmountFolderError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharedFolderAccessError *accessError =
        [DBSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGUnmountFolderError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"no_permission"]) {
    return [[DBSHARINGUnmountFolderError alloc] initWithNoPermission];
  } else if ([tag isEqualToString:@"not_unmountable"]) {
    return [[DBSHARINGUnmountFolderError alloc] initWithNotUnmountable];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGUnmountFolderError alloc] initWithOther];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
