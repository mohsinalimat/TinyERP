///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSHARINGMemberSelector.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGMemberSelector

@synthesize dropboxId = _dropboxId;
@synthesize email = _email;

#pragma mark - Constructors

- (instancetype)initWithDropboxId:(NSString *)dropboxId {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMemberSelectorDropboxId;
    _dropboxId = dropboxId;
  }
  return self;
}

- (instancetype)initWithEmail:(NSString *)email {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMemberSelectorEmail;
    _email = email;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMemberSelectorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)dropboxId {
  if (![self isDropboxId]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGMemberSelectorDropboxId, but was %@.", [self tagName]];
  }
  return _dropboxId;
}

- (NSString *)email {
  if (![self isEmail]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGMemberSelectorEmail, but was %@.", [self tagName]];
  }
  return _email;
}

#pragma mark - Tag state methods

- (BOOL)isDropboxId {
  return _tag == DBSHARINGMemberSelectorDropboxId;
}

- (BOOL)isEmail {
  return _tag == DBSHARINGMemberSelectorEmail;
}

- (BOOL)isOther {
  return _tag == DBSHARINGMemberSelectorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGMemberSelectorDropboxId:
    return @"DBSHARINGMemberSelectorDropboxId";
  case DBSHARINGMemberSelectorEmail:
    return @"DBSHARINGMemberSelectorEmail";
  case DBSHARINGMemberSelectorOther:
    return @"DBSHARINGMemberSelectorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGMemberSelectorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGMemberSelectorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGMemberSelectorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGMemberSelectorSerializer

+ (NSDictionary *)serialize:(DBSHARINGMemberSelector *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDropboxId]) {
    jsonDict[@"dropbox_id"] = valueObj.dropboxId;
    jsonDict[@".tag"] = @"dropbox_id";
  } else if ([valueObj isEmail]) {
    jsonDict[@"email"] = valueObj.email;
    jsonDict[@".tag"] = @"email";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGMemberSelector *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"dropbox_id"]) {
    NSString *dropboxId = valueDict[@"dropbox_id"];
    return [[DBSHARINGMemberSelector alloc] initWithDropboxId:dropboxId];
  } else if ([tag isEqualToString:@"email"]) {
    NSString *email = valueDict[@"email"];
    return [[DBSHARINGMemberSelector alloc] initWithEmail:email];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGMemberSelector alloc] initWithOther];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
