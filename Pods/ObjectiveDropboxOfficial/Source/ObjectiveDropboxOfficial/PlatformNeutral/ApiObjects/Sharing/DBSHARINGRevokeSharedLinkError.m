///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSHARINGRevokeSharedLinkError.h"
#import "DBSHARINGSharedLinkError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGRevokeSharedLinkError

#pragma mark - Constructors

- (instancetype)initWithSharedLinkNotFound {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRevokeSharedLinkErrorSharedLinkNotFound;
  }
  return self;
}

- (instancetype)initWithSharedLinkAccessDenied {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRevokeSharedLinkErrorSharedLinkAccessDenied;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRevokeSharedLinkErrorOther;
  }
  return self;
}

- (instancetype)initWithSharedLinkMalformed {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRevokeSharedLinkErrorSharedLinkMalformed;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isSharedLinkNotFound {
  return _tag == DBSHARINGRevokeSharedLinkErrorSharedLinkNotFound;
}

- (BOOL)isSharedLinkAccessDenied {
  return _tag == DBSHARINGRevokeSharedLinkErrorSharedLinkAccessDenied;
}

- (BOOL)isOther {
  return _tag == DBSHARINGRevokeSharedLinkErrorOther;
}

- (BOOL)isSharedLinkMalformed {
  return _tag == DBSHARINGRevokeSharedLinkErrorSharedLinkMalformed;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGRevokeSharedLinkErrorSharedLinkNotFound:
    return @"DBSHARINGRevokeSharedLinkErrorSharedLinkNotFound";
  case DBSHARINGRevokeSharedLinkErrorSharedLinkAccessDenied:
    return @"DBSHARINGRevokeSharedLinkErrorSharedLinkAccessDenied";
  case DBSHARINGRevokeSharedLinkErrorOther:
    return @"DBSHARINGRevokeSharedLinkErrorOther";
  case DBSHARINGRevokeSharedLinkErrorSharedLinkMalformed:
    return @"DBSHARINGRevokeSharedLinkErrorSharedLinkMalformed";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGRevokeSharedLinkErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGRevokeSharedLinkErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGRevokeSharedLinkErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGRevokeSharedLinkErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGRevokeSharedLinkError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isSharedLinkNotFound]) {
    jsonDict[@".tag"] = @"shared_link_not_found";
  } else if ([valueObj isSharedLinkAccessDenied]) {
    jsonDict[@".tag"] = @"shared_link_access_denied";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isSharedLinkMalformed]) {
    jsonDict[@".tag"] = @"shared_link_malformed";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGRevokeSharedLinkError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"shared_link_not_found"]) {
    return [[DBSHARINGRevokeSharedLinkError alloc] initWithSharedLinkNotFound];
  } else if ([tag isEqualToString:@"shared_link_access_denied"]) {
    return [[DBSHARINGRevokeSharedLinkError alloc] initWithSharedLinkAccessDenied];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGRevokeSharedLinkError alloc] initWithOther];
  } else if ([tag isEqualToString:@"shared_link_malformed"]) {
    return [[DBSHARINGRevokeSharedLinkError alloc] initWithSharedLinkMalformed];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
