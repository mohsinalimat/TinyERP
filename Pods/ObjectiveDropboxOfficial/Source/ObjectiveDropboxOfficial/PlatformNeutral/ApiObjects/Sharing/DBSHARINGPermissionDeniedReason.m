///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSHARINGPermissionDeniedReason.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGPermissionDeniedReason

#pragma mark - Constructors

- (instancetype)initWithUserNotSameTeamAsOwner {
  self = [super init];
  if (self) {
    _tag = DBSHARINGPermissionDeniedReasonUserNotSameTeamAsOwner;
  }
  return self;
}

- (instancetype)initWithUserNotAllowedByOwner {
  self = [super init];
  if (self) {
    _tag = DBSHARINGPermissionDeniedReasonUserNotAllowedByOwner;
  }
  return self;
}

- (instancetype)initWithTargetIsIndirectMember {
  self = [super init];
  if (self) {
    _tag = DBSHARINGPermissionDeniedReasonTargetIsIndirectMember;
  }
  return self;
}

- (instancetype)initWithTargetIsOwner {
  self = [super init];
  if (self) {
    _tag = DBSHARINGPermissionDeniedReasonTargetIsOwner;
  }
  return self;
}

- (instancetype)initWithTargetIsSelf {
  self = [super init];
  if (self) {
    _tag = DBSHARINGPermissionDeniedReasonTargetIsSelf;
  }
  return self;
}

- (instancetype)initWithTargetNotActive {
  self = [super init];
  if (self) {
    _tag = DBSHARINGPermissionDeniedReasonTargetNotActive;
  }
  return self;
}

- (instancetype)initWithFolderIsLimitedTeamFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGPermissionDeniedReasonFolderIsLimitedTeamFolder;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGPermissionDeniedReasonOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isUserNotSameTeamAsOwner {
  return _tag == DBSHARINGPermissionDeniedReasonUserNotSameTeamAsOwner;
}

- (BOOL)isUserNotAllowedByOwner {
  return _tag == DBSHARINGPermissionDeniedReasonUserNotAllowedByOwner;
}

- (BOOL)isTargetIsIndirectMember {
  return _tag == DBSHARINGPermissionDeniedReasonTargetIsIndirectMember;
}

- (BOOL)isTargetIsOwner {
  return _tag == DBSHARINGPermissionDeniedReasonTargetIsOwner;
}

- (BOOL)isTargetIsSelf {
  return _tag == DBSHARINGPermissionDeniedReasonTargetIsSelf;
}

- (BOOL)isTargetNotActive {
  return _tag == DBSHARINGPermissionDeniedReasonTargetNotActive;
}

- (BOOL)isFolderIsLimitedTeamFolder {
  return _tag == DBSHARINGPermissionDeniedReasonFolderIsLimitedTeamFolder;
}

- (BOOL)isOther {
  return _tag == DBSHARINGPermissionDeniedReasonOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGPermissionDeniedReasonUserNotSameTeamAsOwner:
    return @"DBSHARINGPermissionDeniedReasonUserNotSameTeamAsOwner";
  case DBSHARINGPermissionDeniedReasonUserNotAllowedByOwner:
    return @"DBSHARINGPermissionDeniedReasonUserNotAllowedByOwner";
  case DBSHARINGPermissionDeniedReasonTargetIsIndirectMember:
    return @"DBSHARINGPermissionDeniedReasonTargetIsIndirectMember";
  case DBSHARINGPermissionDeniedReasonTargetIsOwner:
    return @"DBSHARINGPermissionDeniedReasonTargetIsOwner";
  case DBSHARINGPermissionDeniedReasonTargetIsSelf:
    return @"DBSHARINGPermissionDeniedReasonTargetIsSelf";
  case DBSHARINGPermissionDeniedReasonTargetNotActive:
    return @"DBSHARINGPermissionDeniedReasonTargetNotActive";
  case DBSHARINGPermissionDeniedReasonFolderIsLimitedTeamFolder:
    return @"DBSHARINGPermissionDeniedReasonFolderIsLimitedTeamFolder";
  case DBSHARINGPermissionDeniedReasonOther:
    return @"DBSHARINGPermissionDeniedReasonOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGPermissionDeniedReasonSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGPermissionDeniedReasonSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGPermissionDeniedReasonSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGPermissionDeniedReasonSerializer

+ (NSDictionary *)serialize:(DBSHARINGPermissionDeniedReason *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserNotSameTeamAsOwner]) {
    jsonDict[@".tag"] = @"user_not_same_team_as_owner";
  } else if ([valueObj isUserNotAllowedByOwner]) {
    jsonDict[@".tag"] = @"user_not_allowed_by_owner";
  } else if ([valueObj isTargetIsIndirectMember]) {
    jsonDict[@".tag"] = @"target_is_indirect_member";
  } else if ([valueObj isTargetIsOwner]) {
    jsonDict[@".tag"] = @"target_is_owner";
  } else if ([valueObj isTargetIsSelf]) {
    jsonDict[@".tag"] = @"target_is_self";
  } else if ([valueObj isTargetNotActive]) {
    jsonDict[@".tag"] = @"target_not_active";
  } else if ([valueObj isFolderIsLimitedTeamFolder]) {
    jsonDict[@".tag"] = @"folder_is_limited_team_folder";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGPermissionDeniedReason *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_not_same_team_as_owner"]) {
    return [[DBSHARINGPermissionDeniedReason alloc] initWithUserNotSameTeamAsOwner];
  } else if ([tag isEqualToString:@"user_not_allowed_by_owner"]) {
    return [[DBSHARINGPermissionDeniedReason alloc] initWithUserNotAllowedByOwner];
  } else if ([tag isEqualToString:@"target_is_indirect_member"]) {
    return [[DBSHARINGPermissionDeniedReason alloc] initWithTargetIsIndirectMember];
  } else if ([tag isEqualToString:@"target_is_owner"]) {
    return [[DBSHARINGPermissionDeniedReason alloc] initWithTargetIsOwner];
  } else if ([tag isEqualToString:@"target_is_self"]) {
    return [[DBSHARINGPermissionDeniedReason alloc] initWithTargetIsSelf];
  } else if ([tag isEqualToString:@"target_not_active"]) {
    return [[DBSHARINGPermissionDeniedReason alloc] initWithTargetNotActive];
  } else if ([tag isEqualToString:@"folder_is_limited_team_folder"]) {
    return [[DBSHARINGPermissionDeniedReason alloc] initWithFolderIsLimitedTeamFolder];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGPermissionDeniedReason alloc] initWithOther];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
