///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSHARINGInsufficientQuotaAmounts.h"
#import "DBSHARINGMountFolderError.h"
#import "DBSHARINGSharedFolderAccessError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGMountFolderError

@synthesize accessError = _accessError;
@synthesize insufficientQuota = _insufficientQuota;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBSHARINGSharedFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMountFolderErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithInsideSharedFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMountFolderErrorInsideSharedFolder;
  }
  return self;
}

- (instancetype)initWithInsufficientQuota:(DBSHARINGInsufficientQuotaAmounts *)insufficientQuota {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMountFolderErrorInsufficientQuota;
    _insufficientQuota = insufficientQuota;
  }
  return self;
}

- (instancetype)initWithAlreadyMounted {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMountFolderErrorAlreadyMounted;
  }
  return self;
}

- (instancetype)initWithNoPermission {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMountFolderErrorNoPermission;
  }
  return self;
}

- (instancetype)initWithNotMountable {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMountFolderErrorNotMountable;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMountFolderErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharedFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGMountFolderErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

- (DBSHARINGInsufficientQuotaAmounts *)insufficientQuota {
  if (![self isInsufficientQuota]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGMountFolderErrorInsufficientQuota, but was %@.", [self tagName]];
  }
  return _insufficientQuota;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBSHARINGMountFolderErrorAccessError;
}

- (BOOL)isInsideSharedFolder {
  return _tag == DBSHARINGMountFolderErrorInsideSharedFolder;
}

- (BOOL)isInsufficientQuota {
  return _tag == DBSHARINGMountFolderErrorInsufficientQuota;
}

- (BOOL)isAlreadyMounted {
  return _tag == DBSHARINGMountFolderErrorAlreadyMounted;
}

- (BOOL)isNoPermission {
  return _tag == DBSHARINGMountFolderErrorNoPermission;
}

- (BOOL)isNotMountable {
  return _tag == DBSHARINGMountFolderErrorNotMountable;
}

- (BOOL)isOther {
  return _tag == DBSHARINGMountFolderErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGMountFolderErrorAccessError:
    return @"DBSHARINGMountFolderErrorAccessError";
  case DBSHARINGMountFolderErrorInsideSharedFolder:
    return @"DBSHARINGMountFolderErrorInsideSharedFolder";
  case DBSHARINGMountFolderErrorInsufficientQuota:
    return @"DBSHARINGMountFolderErrorInsufficientQuota";
  case DBSHARINGMountFolderErrorAlreadyMounted:
    return @"DBSHARINGMountFolderErrorAlreadyMounted";
  case DBSHARINGMountFolderErrorNoPermission:
    return @"DBSHARINGMountFolderErrorNoPermission";
  case DBSHARINGMountFolderErrorNotMountable:
    return @"DBSHARINGMountFolderErrorNotMountable";
  case DBSHARINGMountFolderErrorOther:
    return @"DBSHARINGMountFolderErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGMountFolderErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGMountFolderErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGMountFolderErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGMountFolderErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGMountFolderError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isInsideSharedFolder]) {
    jsonDict[@".tag"] = @"inside_shared_folder";
  } else if ([valueObj isInsufficientQuota]) {
    jsonDict[@"insufficient_quota"] =
        [[DBSHARINGInsufficientQuotaAmountsSerializer serialize:valueObj.insufficientQuota] mutableCopy];
    jsonDict[@".tag"] = @"insufficient_quota";
  } else if ([valueObj isAlreadyMounted]) {
    jsonDict[@".tag"] = @"already_mounted";
  } else if ([valueObj isNoPermission]) {
    jsonDict[@".tag"] = @"no_permission";
  } else if ([valueObj isNotMountable]) {
    jsonDict[@".tag"] = @"not_mountable";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGMountFolderError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharedFolderAccessError *accessError =
        [DBSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGMountFolderError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"inside_shared_folder"]) {
    return [[DBSHARINGMountFolderError alloc] initWithInsideSharedFolder];
  } else if ([tag isEqualToString:@"insufficient_quota"]) {
    DBSHARINGInsufficientQuotaAmounts *insufficientQuota =
        [DBSHARINGInsufficientQuotaAmountsSerializer deserialize:valueDict];
    return [[DBSHARINGMountFolderError alloc] initWithInsufficientQuota:insufficientQuota];
  } else if ([tag isEqualToString:@"already_mounted"]) {
    return [[DBSHARINGMountFolderError alloc] initWithAlreadyMounted];
  } else if ([tag isEqualToString:@"no_permission"]) {
    return [[DBSHARINGMountFolderError alloc] initWithNoPermission];
  } else if ([tag isEqualToString:@"not_mountable"]) {
    return [[DBSHARINGMountFolderError alloc] initWithNotMountable];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGMountFolderError alloc] initWithOther];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
