///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBFILESLookupError.h"
#import "DBSHARINGCreateSharedLinkWithSettingsError.h"
#import "DBSHARINGSharedLinkSettingsError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGCreateSharedLinkWithSettingsError

@synthesize path = _path;
@synthesize settingsError = _settingsError;

#pragma mark - Constructors

- (instancetype)initWithPath:(DBFILESLookupError *)path {
  self = [super init];
  if (self) {
    _tag = DBSHARINGCreateSharedLinkWithSettingsErrorPath;
    _path = path;
  }
  return self;
}

- (instancetype)initWithEmailNotVerified {
  self = [super init];
  if (self) {
    _tag = DBSHARINGCreateSharedLinkWithSettingsErrorEmailNotVerified;
  }
  return self;
}

- (instancetype)initWithSharedLinkAlreadyExists {
  self = [super init];
  if (self) {
    _tag = DBSHARINGCreateSharedLinkWithSettingsErrorSharedLinkAlreadyExists;
  }
  return self;
}

- (instancetype)initWithSettingsError:(DBSHARINGSharedLinkSettingsError *)settingsError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGCreateSharedLinkWithSettingsErrorSettingsError;
    _settingsError = settingsError;
  }
  return self;
}

- (instancetype)initWithAccessDenied {
  self = [super init];
  if (self) {
    _tag = DBSHARINGCreateSharedLinkWithSettingsErrorAccessDenied;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBFILESLookupError *)path {
  if (![self isPath]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGCreateSharedLinkWithSettingsErrorPath, but was %@.", [self tagName]];
  }
  return _path;
}

- (DBSHARINGSharedLinkSettingsError *)settingsError {
  if (![self isSettingsError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGCreateSharedLinkWithSettingsErrorSettingsError, but was %@.",
                       [self tagName]];
  }
  return _settingsError;
}

#pragma mark - Tag state methods

- (BOOL)isPath {
  return _tag == DBSHARINGCreateSharedLinkWithSettingsErrorPath;
}

- (BOOL)isEmailNotVerified {
  return _tag == DBSHARINGCreateSharedLinkWithSettingsErrorEmailNotVerified;
}

- (BOOL)isSharedLinkAlreadyExists {
  return _tag == DBSHARINGCreateSharedLinkWithSettingsErrorSharedLinkAlreadyExists;
}

- (BOOL)isSettingsError {
  return _tag == DBSHARINGCreateSharedLinkWithSettingsErrorSettingsError;
}

- (BOOL)isAccessDenied {
  return _tag == DBSHARINGCreateSharedLinkWithSettingsErrorAccessDenied;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGCreateSharedLinkWithSettingsErrorPath:
    return @"DBSHARINGCreateSharedLinkWithSettingsErrorPath";
  case DBSHARINGCreateSharedLinkWithSettingsErrorEmailNotVerified:
    return @"DBSHARINGCreateSharedLinkWithSettingsErrorEmailNotVerified";
  case DBSHARINGCreateSharedLinkWithSettingsErrorSharedLinkAlreadyExists:
    return @"DBSHARINGCreateSharedLinkWithSettingsErrorSharedLinkAlreadyExists";
  case DBSHARINGCreateSharedLinkWithSettingsErrorSettingsError:
    return @"DBSHARINGCreateSharedLinkWithSettingsErrorSettingsError";
  case DBSHARINGCreateSharedLinkWithSettingsErrorAccessDenied:
    return @"DBSHARINGCreateSharedLinkWithSettingsErrorAccessDenied";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGCreateSharedLinkWithSettingsErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGCreateSharedLinkWithSettingsErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGCreateSharedLinkWithSettingsErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGCreateSharedLinkWithSettingsErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGCreateSharedLinkWithSettingsError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isPath]) {
    jsonDict[@"path"] = [[DBFILESLookupErrorSerializer serialize:valueObj.path] mutableCopy];
    jsonDict[@".tag"] = @"path";
  } else if ([valueObj isEmailNotVerified]) {
    jsonDict[@".tag"] = @"email_not_verified";
  } else if ([valueObj isSharedLinkAlreadyExists]) {
    jsonDict[@".tag"] = @"shared_link_already_exists";
  } else if ([valueObj isSettingsError]) {
    jsonDict[@"settings_error"] =
        [[DBSHARINGSharedLinkSettingsErrorSerializer serialize:valueObj.settingsError] mutableCopy];
    jsonDict[@".tag"] = @"settings_error";
  } else if ([valueObj isAccessDenied]) {
    jsonDict[@".tag"] = @"access_denied";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGCreateSharedLinkWithSettingsError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"path"]) {
    DBFILESLookupError *path = [DBFILESLookupErrorSerializer deserialize:valueDict[@"path"]];
    return [[DBSHARINGCreateSharedLinkWithSettingsError alloc] initWithPath:path];
  } else if ([tag isEqualToString:@"email_not_verified"]) {
    return [[DBSHARINGCreateSharedLinkWithSettingsError alloc] initWithEmailNotVerified];
  } else if ([tag isEqualToString:@"shared_link_already_exists"]) {
    return [[DBSHARINGCreateSharedLinkWithSettingsError alloc] initWithSharedLinkAlreadyExists];
  } else if ([tag isEqualToString:@"settings_error"]) {
    DBSHARINGSharedLinkSettingsError *settingsError =
        [DBSHARINGSharedLinkSettingsErrorSerializer deserialize:valueDict[@"settings_error"]];
    return [[DBSHARINGCreateSharedLinkWithSettingsError alloc] initWithSettingsError:settingsError];
  } else if ([tag isEqualToString:@"access_denied"]) {
    return [[DBSHARINGCreateSharedLinkWithSettingsError alloc] initWithAccessDenied];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
