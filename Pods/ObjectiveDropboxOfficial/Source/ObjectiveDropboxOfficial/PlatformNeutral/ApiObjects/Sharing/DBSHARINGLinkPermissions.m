///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSHARINGLinkPermissions.h"
#import "DBSHARINGRequestedVisibility.h"
#import "DBSHARINGResolvedVisibility.h"
#import "DBSHARINGSharedLinkAccessFailureReason.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGLinkPermissions

#pragma mark - Constructors

- (instancetype)initWithCanRevoke:(NSNumber *)canRevoke
               resolvedVisibility:(DBSHARINGResolvedVisibility *)resolvedVisibility
              requestedVisibility:(DBSHARINGRequestedVisibility *)requestedVisibility
              revokeFailureReason:(DBSHARINGSharedLinkAccessFailureReason *)revokeFailureReason {

  self = [super init];
  if (self) {
    _resolvedVisibility = resolvedVisibility;
    _requestedVisibility = requestedVisibility;
    _canRevoke = canRevoke;
    _revokeFailureReason = revokeFailureReason;
  }
  return self;
}

- (instancetype)initWithCanRevoke:(NSNumber *)canRevoke {
  return [self initWithCanRevoke:canRevoke resolvedVisibility:nil requestedVisibility:nil revokeFailureReason:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGLinkPermissionsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGLinkPermissionsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGLinkPermissionsSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGLinkPermissionsSerializer

+ (NSDictionary *)serialize:(DBSHARINGLinkPermissions *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"can_revoke"] = valueObj.canRevoke;
  if (valueObj.resolvedVisibility) {
    jsonDict[@"resolved_visibility"] = [DBSHARINGResolvedVisibilitySerializer serialize:valueObj.resolvedVisibility];
  }
  if (valueObj.requestedVisibility) {
    jsonDict[@"requested_visibility"] = [DBSHARINGRequestedVisibilitySerializer serialize:valueObj.requestedVisibility];
  }
  if (valueObj.revokeFailureReason) {
    jsonDict[@"revoke_failure_reason"] =
        [DBSHARINGSharedLinkAccessFailureReasonSerializer serialize:valueObj.revokeFailureReason];
  }

  return jsonDict;
}

+ (DBSHARINGLinkPermissions *)deserialize:(NSDictionary *)valueDict {
  NSNumber *canRevoke = valueDict[@"can_revoke"];
  DBSHARINGResolvedVisibility *resolvedVisibility =
      valueDict[@"resolved_visibility"]
          ? [DBSHARINGResolvedVisibilitySerializer deserialize:valueDict[@"resolved_visibility"]]
          : nil;
  DBSHARINGRequestedVisibility *requestedVisibility =
      valueDict[@"requested_visibility"]
          ? [DBSHARINGRequestedVisibilitySerializer deserialize:valueDict[@"requested_visibility"]]
          : nil;
  DBSHARINGSharedLinkAccessFailureReason *revokeFailureReason =
      valueDict[@"revoke_failure_reason"]
          ? [DBSHARINGSharedLinkAccessFailureReasonSerializer deserialize:valueDict[@"revoke_failure_reason"]]
          : nil;

  return [[DBSHARINGLinkPermissions alloc] initWithCanRevoke:canRevoke
                                          resolvedVisibility:resolvedVisibility
                                         requestedVisibility:requestedVisibility
                                         revokeFailureReason:revokeFailureReason];
}

@end
