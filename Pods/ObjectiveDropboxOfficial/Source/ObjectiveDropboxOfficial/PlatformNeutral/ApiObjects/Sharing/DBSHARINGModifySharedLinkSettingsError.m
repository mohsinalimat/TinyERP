///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSHARINGModifySharedLinkSettingsError.h"
#import "DBSHARINGSharedLinkError.h"
#import "DBSHARINGSharedLinkSettingsError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGModifySharedLinkSettingsError

@synthesize settingsError = _settingsError;

#pragma mark - Constructors

- (instancetype)initWithSharedLinkNotFound {
  self = [super init];
  if (self) {
    _tag = DBSHARINGModifySharedLinkSettingsErrorSharedLinkNotFound;
  }
  return self;
}

- (instancetype)initWithSharedLinkAccessDenied {
  self = [super init];
  if (self) {
    _tag = DBSHARINGModifySharedLinkSettingsErrorSharedLinkAccessDenied;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGModifySharedLinkSettingsErrorOther;
  }
  return self;
}

- (instancetype)initWithSettingsError:(DBSHARINGSharedLinkSettingsError *)settingsError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGModifySharedLinkSettingsErrorSettingsError;
    _settingsError = settingsError;
  }
  return self;
}

- (instancetype)initWithEmailNotVerified {
  self = [super init];
  if (self) {
    _tag = DBSHARINGModifySharedLinkSettingsErrorEmailNotVerified;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharedLinkSettingsError *)settingsError {
  if (![self isSettingsError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGModifySharedLinkSettingsErrorSettingsError, but was %@.",
                       [self tagName]];
  }
  return _settingsError;
}

#pragma mark - Tag state methods

- (BOOL)isSharedLinkNotFound {
  return _tag == DBSHARINGModifySharedLinkSettingsErrorSharedLinkNotFound;
}

- (BOOL)isSharedLinkAccessDenied {
  return _tag == DBSHARINGModifySharedLinkSettingsErrorSharedLinkAccessDenied;
}

- (BOOL)isOther {
  return _tag == DBSHARINGModifySharedLinkSettingsErrorOther;
}

- (BOOL)isSettingsError {
  return _tag == DBSHARINGModifySharedLinkSettingsErrorSettingsError;
}

- (BOOL)isEmailNotVerified {
  return _tag == DBSHARINGModifySharedLinkSettingsErrorEmailNotVerified;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGModifySharedLinkSettingsErrorSharedLinkNotFound:
    return @"DBSHARINGModifySharedLinkSettingsErrorSharedLinkNotFound";
  case DBSHARINGModifySharedLinkSettingsErrorSharedLinkAccessDenied:
    return @"DBSHARINGModifySharedLinkSettingsErrorSharedLinkAccessDenied";
  case DBSHARINGModifySharedLinkSettingsErrorOther:
    return @"DBSHARINGModifySharedLinkSettingsErrorOther";
  case DBSHARINGModifySharedLinkSettingsErrorSettingsError:
    return @"DBSHARINGModifySharedLinkSettingsErrorSettingsError";
  case DBSHARINGModifySharedLinkSettingsErrorEmailNotVerified:
    return @"DBSHARINGModifySharedLinkSettingsErrorEmailNotVerified";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGModifySharedLinkSettingsErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGModifySharedLinkSettingsErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGModifySharedLinkSettingsErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGModifySharedLinkSettingsErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGModifySharedLinkSettingsError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isSharedLinkNotFound]) {
    jsonDict[@".tag"] = @"shared_link_not_found";
  } else if ([valueObj isSharedLinkAccessDenied]) {
    jsonDict[@".tag"] = @"shared_link_access_denied";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isSettingsError]) {
    jsonDict[@"settings_error"] =
        [[DBSHARINGSharedLinkSettingsErrorSerializer serialize:valueObj.settingsError] mutableCopy];
    jsonDict[@".tag"] = @"settings_error";
  } else if ([valueObj isEmailNotVerified]) {
    jsonDict[@".tag"] = @"email_not_verified";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGModifySharedLinkSettingsError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"shared_link_not_found"]) {
    return [[DBSHARINGModifySharedLinkSettingsError alloc] initWithSharedLinkNotFound];
  } else if ([tag isEqualToString:@"shared_link_access_denied"]) {
    return [[DBSHARINGModifySharedLinkSettingsError alloc] initWithSharedLinkAccessDenied];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGModifySharedLinkSettingsError alloc] initWithOther];
  } else if ([tag isEqualToString:@"settings_error"]) {
    DBSHARINGSharedLinkSettingsError *settingsError =
        [DBSHARINGSharedLinkSettingsErrorSerializer deserialize:valueDict[@"settings_error"]];
    return [[DBSHARINGModifySharedLinkSettingsError alloc] initWithSettingsError:settingsError];
  } else if ([tag isEqualToString:@"email_not_verified"]) {
    return [[DBSHARINGModifySharedLinkSettingsError alloc] initWithEmailNotVerified];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
