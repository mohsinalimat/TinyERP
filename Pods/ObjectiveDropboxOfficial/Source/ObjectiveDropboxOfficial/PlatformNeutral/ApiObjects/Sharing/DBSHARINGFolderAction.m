///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSHARINGFolderAction.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGFolderAction

#pragma mark - Constructors

- (instancetype)initWithChangeOptions {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionChangeOptions;
  }
  return self;
}

- (instancetype)initWithEditContents {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionEditContents;
  }
  return self;
}

- (instancetype)initWithInviteEditor {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionInviteEditor;
  }
  return self;
}

- (instancetype)initWithInviteViewer {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionInviteViewer;
  }
  return self;
}

- (instancetype)initWithInviteViewerNoComment {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionInviteViewerNoComment;
  }
  return self;
}

- (instancetype)initWithRelinquishMembership {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionRelinquishMembership;
  }
  return self;
}

- (instancetype)initWithUnmount {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionUnmount;
  }
  return self;
}

- (instancetype)initWithUnshare {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionUnshare;
  }
  return self;
}

- (instancetype)initWithLeaveACopy {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionLeaveACopy;
  }
  return self;
}

- (instancetype)initWithShareLink {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionShareLink;
  }
  return self;
}

- (instancetype)initWithCreateLink {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionCreateLink;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isChangeOptions {
  return _tag == DBSHARINGFolderActionChangeOptions;
}

- (BOOL)isEditContents {
  return _tag == DBSHARINGFolderActionEditContents;
}

- (BOOL)isInviteEditor {
  return _tag == DBSHARINGFolderActionInviteEditor;
}

- (BOOL)isInviteViewer {
  return _tag == DBSHARINGFolderActionInviteViewer;
}

- (BOOL)isInviteViewerNoComment {
  return _tag == DBSHARINGFolderActionInviteViewerNoComment;
}

- (BOOL)isRelinquishMembership {
  return _tag == DBSHARINGFolderActionRelinquishMembership;
}

- (BOOL)isUnmount {
  return _tag == DBSHARINGFolderActionUnmount;
}

- (BOOL)isUnshare {
  return _tag == DBSHARINGFolderActionUnshare;
}

- (BOOL)isLeaveACopy {
  return _tag == DBSHARINGFolderActionLeaveACopy;
}

- (BOOL)isShareLink {
  return _tag == DBSHARINGFolderActionShareLink;
}

- (BOOL)isCreateLink {
  return _tag == DBSHARINGFolderActionCreateLink;
}

- (BOOL)isOther {
  return _tag == DBSHARINGFolderActionOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGFolderActionChangeOptions:
    return @"DBSHARINGFolderActionChangeOptions";
  case DBSHARINGFolderActionEditContents:
    return @"DBSHARINGFolderActionEditContents";
  case DBSHARINGFolderActionInviteEditor:
    return @"DBSHARINGFolderActionInviteEditor";
  case DBSHARINGFolderActionInviteViewer:
    return @"DBSHARINGFolderActionInviteViewer";
  case DBSHARINGFolderActionInviteViewerNoComment:
    return @"DBSHARINGFolderActionInviteViewerNoComment";
  case DBSHARINGFolderActionRelinquishMembership:
    return @"DBSHARINGFolderActionRelinquishMembership";
  case DBSHARINGFolderActionUnmount:
    return @"DBSHARINGFolderActionUnmount";
  case DBSHARINGFolderActionUnshare:
    return @"DBSHARINGFolderActionUnshare";
  case DBSHARINGFolderActionLeaveACopy:
    return @"DBSHARINGFolderActionLeaveACopy";
  case DBSHARINGFolderActionShareLink:
    return @"DBSHARINGFolderActionShareLink";
  case DBSHARINGFolderActionCreateLink:
    return @"DBSHARINGFolderActionCreateLink";
  case DBSHARINGFolderActionOther:
    return @"DBSHARINGFolderActionOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGFolderActionSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGFolderActionSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGFolderActionSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGFolderActionSerializer

+ (NSDictionary *)serialize:(DBSHARINGFolderAction *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isChangeOptions]) {
    jsonDict[@".tag"] = @"change_options";
  } else if ([valueObj isEditContents]) {
    jsonDict[@".tag"] = @"edit_contents";
  } else if ([valueObj isInviteEditor]) {
    jsonDict[@".tag"] = @"invite_editor";
  } else if ([valueObj isInviteViewer]) {
    jsonDict[@".tag"] = @"invite_viewer";
  } else if ([valueObj isInviteViewerNoComment]) {
    jsonDict[@".tag"] = @"invite_viewer_no_comment";
  } else if ([valueObj isRelinquishMembership]) {
    jsonDict[@".tag"] = @"relinquish_membership";
  } else if ([valueObj isUnmount]) {
    jsonDict[@".tag"] = @"unmount";
  } else if ([valueObj isUnshare]) {
    jsonDict[@".tag"] = @"unshare";
  } else if ([valueObj isLeaveACopy]) {
    jsonDict[@".tag"] = @"leave_a_copy";
  } else if ([valueObj isShareLink]) {
    jsonDict[@".tag"] = @"share_link";
  } else if ([valueObj isCreateLink]) {
    jsonDict[@".tag"] = @"create_link";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGFolderAction *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"change_options"]) {
    return [[DBSHARINGFolderAction alloc] initWithChangeOptions];
  } else if ([tag isEqualToString:@"edit_contents"]) {
    return [[DBSHARINGFolderAction alloc] initWithEditContents];
  } else if ([tag isEqualToString:@"invite_editor"]) {
    return [[DBSHARINGFolderAction alloc] initWithInviteEditor];
  } else if ([tag isEqualToString:@"invite_viewer"]) {
    return [[DBSHARINGFolderAction alloc] initWithInviteViewer];
  } else if ([tag isEqualToString:@"invite_viewer_no_comment"]) {
    return [[DBSHARINGFolderAction alloc] initWithInviteViewerNoComment];
  } else if ([tag isEqualToString:@"relinquish_membership"]) {
    return [[DBSHARINGFolderAction alloc] initWithRelinquishMembership];
  } else if ([tag isEqualToString:@"unmount"]) {
    return [[DBSHARINGFolderAction alloc] initWithUnmount];
  } else if ([tag isEqualToString:@"unshare"]) {
    return [[DBSHARINGFolderAction alloc] initWithUnshare];
  } else if ([tag isEqualToString:@"leave_a_copy"]) {
    return [[DBSHARINGFolderAction alloc] initWithLeaveACopy];
  } else if ([tag isEqualToString:@"share_link"]) {
    return [[DBSHARINGFolderAction alloc] initWithShareLink];
  } else if ([tag isEqualToString:@"create_link"]) {
    return [[DBSHARINGFolderAction alloc] initWithCreateLink];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGFolderAction alloc] initWithOther];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
