///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSHARINGRelinquishFolderMembershipError.h"
#import "DBSHARINGSharedFolderAccessError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGRelinquishFolderMembershipError

@synthesize accessError = _accessError;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBSHARINGSharedFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRelinquishFolderMembershipErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithFolderOwner {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRelinquishFolderMembershipErrorFolderOwner;
  }
  return self;
}

- (instancetype)initWithMounted {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRelinquishFolderMembershipErrorMounted;
  }
  return self;
}

- (instancetype)initWithGroupAccess {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRelinquishFolderMembershipErrorGroupAccess;
  }
  return self;
}

- (instancetype)initWithTeamFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRelinquishFolderMembershipErrorTeamFolder;
  }
  return self;
}

- (instancetype)initWithNoPermission {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRelinquishFolderMembershipErrorNoPermission;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRelinquishFolderMembershipErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharedFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGRelinquishFolderMembershipErrorAccessError, but was %@.",
                       [self tagName]];
  }
  return _accessError;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBSHARINGRelinquishFolderMembershipErrorAccessError;
}

- (BOOL)isFolderOwner {
  return _tag == DBSHARINGRelinquishFolderMembershipErrorFolderOwner;
}

- (BOOL)isMounted {
  return _tag == DBSHARINGRelinquishFolderMembershipErrorMounted;
}

- (BOOL)isGroupAccess {
  return _tag == DBSHARINGRelinquishFolderMembershipErrorGroupAccess;
}

- (BOOL)isTeamFolder {
  return _tag == DBSHARINGRelinquishFolderMembershipErrorTeamFolder;
}

- (BOOL)isNoPermission {
  return _tag == DBSHARINGRelinquishFolderMembershipErrorNoPermission;
}

- (BOOL)isOther {
  return _tag == DBSHARINGRelinquishFolderMembershipErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGRelinquishFolderMembershipErrorAccessError:
    return @"DBSHARINGRelinquishFolderMembershipErrorAccessError";
  case DBSHARINGRelinquishFolderMembershipErrorFolderOwner:
    return @"DBSHARINGRelinquishFolderMembershipErrorFolderOwner";
  case DBSHARINGRelinquishFolderMembershipErrorMounted:
    return @"DBSHARINGRelinquishFolderMembershipErrorMounted";
  case DBSHARINGRelinquishFolderMembershipErrorGroupAccess:
    return @"DBSHARINGRelinquishFolderMembershipErrorGroupAccess";
  case DBSHARINGRelinquishFolderMembershipErrorTeamFolder:
    return @"DBSHARINGRelinquishFolderMembershipErrorTeamFolder";
  case DBSHARINGRelinquishFolderMembershipErrorNoPermission:
    return @"DBSHARINGRelinquishFolderMembershipErrorNoPermission";
  case DBSHARINGRelinquishFolderMembershipErrorOther:
    return @"DBSHARINGRelinquishFolderMembershipErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGRelinquishFolderMembershipErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGRelinquishFolderMembershipErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGRelinquishFolderMembershipErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGRelinquishFolderMembershipErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGRelinquishFolderMembershipError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isFolderOwner]) {
    jsonDict[@".tag"] = @"folder_owner";
  } else if ([valueObj isMounted]) {
    jsonDict[@".tag"] = @"mounted";
  } else if ([valueObj isGroupAccess]) {
    jsonDict[@".tag"] = @"group_access";
  } else if ([valueObj isTeamFolder]) {
    jsonDict[@".tag"] = @"team_folder";
  } else if ([valueObj isNoPermission]) {
    jsonDict[@".tag"] = @"no_permission";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGRelinquishFolderMembershipError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharedFolderAccessError *accessError =
        [DBSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGRelinquishFolderMembershipError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"folder_owner"]) {
    return [[DBSHARINGRelinquishFolderMembershipError alloc] initWithFolderOwner];
  } else if ([tag isEqualToString:@"mounted"]) {
    return [[DBSHARINGRelinquishFolderMembershipError alloc] initWithMounted];
  } else if ([tag isEqualToString:@"group_access"]) {
    return [[DBSHARINGRelinquishFolderMembershipError alloc] initWithGroupAccess];
  } else if ([tag isEqualToString:@"team_folder"]) {
    return [[DBSHARINGRelinquishFolderMembershipError alloc] initWithTeamFolder];
  } else if ([tag isEqualToString:@"no_permission"]) {
    return [[DBSHARINGRelinquishFolderMembershipError alloc] initWithNoPermission];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGRelinquishFolderMembershipError alloc] initWithOther];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
