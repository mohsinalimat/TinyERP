///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSHARINGSharedFolderAccessError.h"
#import "DBSHARINGTransferFolderError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGTransferFolderError

@synthesize accessError = _accessError;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBSHARINGSharedFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGTransferFolderErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithInvalidDropboxId {
  self = [super init];
  if (self) {
    _tag = DBSHARINGTransferFolderErrorInvalidDropboxId;
  }
  return self;
}

- (instancetype)initWithDNewOwnerNotAMember {
  self = [super init];
  if (self) {
    _tag = DBSHARINGTransferFolderErrorDNewOwnerNotAMember;
  }
  return self;
}

- (instancetype)initWithDNewOwnerUnmounted {
  self = [super init];
  if (self) {
    _tag = DBSHARINGTransferFolderErrorDNewOwnerUnmounted;
  }
  return self;
}

- (instancetype)initWithDNewOwnerEmailUnverified {
  self = [super init];
  if (self) {
    _tag = DBSHARINGTransferFolderErrorDNewOwnerEmailUnverified;
  }
  return self;
}

- (instancetype)initWithTeamFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGTransferFolderErrorTeamFolder;
  }
  return self;
}

- (instancetype)initWithNoPermission {
  self = [super init];
  if (self) {
    _tag = DBSHARINGTransferFolderErrorNoPermission;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGTransferFolderErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharedFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGTransferFolderErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBSHARINGTransferFolderErrorAccessError;
}

- (BOOL)isInvalidDropboxId {
  return _tag == DBSHARINGTransferFolderErrorInvalidDropboxId;
}

- (BOOL)isDNewOwnerNotAMember {
  return _tag == DBSHARINGTransferFolderErrorDNewOwnerNotAMember;
}

- (BOOL)isDNewOwnerUnmounted {
  return _tag == DBSHARINGTransferFolderErrorDNewOwnerUnmounted;
}

- (BOOL)isDNewOwnerEmailUnverified {
  return _tag == DBSHARINGTransferFolderErrorDNewOwnerEmailUnverified;
}

- (BOOL)isTeamFolder {
  return _tag == DBSHARINGTransferFolderErrorTeamFolder;
}

- (BOOL)isNoPermission {
  return _tag == DBSHARINGTransferFolderErrorNoPermission;
}

- (BOOL)isOther {
  return _tag == DBSHARINGTransferFolderErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGTransferFolderErrorAccessError:
    return @"DBSHARINGTransferFolderErrorAccessError";
  case DBSHARINGTransferFolderErrorInvalidDropboxId:
    return @"DBSHARINGTransferFolderErrorInvalidDropboxId";
  case DBSHARINGTransferFolderErrorDNewOwnerNotAMember:
    return @"DBSHARINGTransferFolderErrorDNewOwnerNotAMember";
  case DBSHARINGTransferFolderErrorDNewOwnerUnmounted:
    return @"DBSHARINGTransferFolderErrorDNewOwnerUnmounted";
  case DBSHARINGTransferFolderErrorDNewOwnerEmailUnverified:
    return @"DBSHARINGTransferFolderErrorDNewOwnerEmailUnverified";
  case DBSHARINGTransferFolderErrorTeamFolder:
    return @"DBSHARINGTransferFolderErrorTeamFolder";
  case DBSHARINGTransferFolderErrorNoPermission:
    return @"DBSHARINGTransferFolderErrorNoPermission";
  case DBSHARINGTransferFolderErrorOther:
    return @"DBSHARINGTransferFolderErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGTransferFolderErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGTransferFolderErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGTransferFolderErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGTransferFolderErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGTransferFolderError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isInvalidDropboxId]) {
    jsonDict[@".tag"] = @"invalid_dropbox_id";
  } else if ([valueObj isDNewOwnerNotAMember]) {
    jsonDict[@".tag"] = @"new_owner_not_a_member";
  } else if ([valueObj isDNewOwnerUnmounted]) {
    jsonDict[@".tag"] = @"new_owner_unmounted";
  } else if ([valueObj isDNewOwnerEmailUnverified]) {
    jsonDict[@".tag"] = @"new_owner_email_unverified";
  } else if ([valueObj isTeamFolder]) {
    jsonDict[@".tag"] = @"team_folder";
  } else if ([valueObj isNoPermission]) {
    jsonDict[@".tag"] = @"no_permission";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGTransferFolderError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharedFolderAccessError *accessError =
        [DBSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGTransferFolderError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"invalid_dropbox_id"]) {
    return [[DBSHARINGTransferFolderError alloc] initWithInvalidDropboxId];
  } else if ([tag isEqualToString:@"new_owner_not_a_member"]) {
    return [[DBSHARINGTransferFolderError alloc] initWithDNewOwnerNotAMember];
  } else if ([tag isEqualToString:@"new_owner_unmounted"]) {
    return [[DBSHARINGTransferFolderError alloc] initWithDNewOwnerUnmounted];
  } else if ([tag isEqualToString:@"new_owner_email_unverified"]) {
    return [[DBSHARINGTransferFolderError alloc] initWithDNewOwnerEmailUnverified];
  } else if ([tag isEqualToString:@"team_folder"]) {
    return [[DBSHARINGTransferFolderError alloc] initWithTeamFolder];
  } else if ([tag isEqualToString:@"no_permission"]) {
    return [[DBSHARINGTransferFolderError alloc] initWithNoPermission];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGTransferFolderError alloc] initWithOther];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
