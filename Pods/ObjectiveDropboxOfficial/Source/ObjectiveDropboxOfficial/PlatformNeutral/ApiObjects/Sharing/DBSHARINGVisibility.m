///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSHARINGVisibility.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGVisibility

#pragma mark - Constructors

- (instancetype)initWithPublic {
  self = [super init];
  if (self) {
    _tag = DBSHARINGVisibilityPublic;
  }
  return self;
}

- (instancetype)initWithTeamOnly {
  self = [super init];
  if (self) {
    _tag = DBSHARINGVisibilityTeamOnly;
  }
  return self;
}

- (instancetype)initWithPassword {
  self = [super init];
  if (self) {
    _tag = DBSHARINGVisibilityPassword;
  }
  return self;
}

- (instancetype)initWithTeamAndPassword {
  self = [super init];
  if (self) {
    _tag = DBSHARINGVisibilityTeamAndPassword;
  }
  return self;
}

- (instancetype)initWithSharedFolderOnly {
  self = [super init];
  if (self) {
    _tag = DBSHARINGVisibilitySharedFolderOnly;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGVisibilityOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isPublic {
  return _tag == DBSHARINGVisibilityPublic;
}

- (BOOL)isTeamOnly {
  return _tag == DBSHARINGVisibilityTeamOnly;
}

- (BOOL)isPassword {
  return _tag == DBSHARINGVisibilityPassword;
}

- (BOOL)isTeamAndPassword {
  return _tag == DBSHARINGVisibilityTeamAndPassword;
}

- (BOOL)isSharedFolderOnly {
  return _tag == DBSHARINGVisibilitySharedFolderOnly;
}

- (BOOL)isOther {
  return _tag == DBSHARINGVisibilityOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGVisibilityPublic:
    return @"DBSHARINGVisibilityPublic";
  case DBSHARINGVisibilityTeamOnly:
    return @"DBSHARINGVisibilityTeamOnly";
  case DBSHARINGVisibilityPassword:
    return @"DBSHARINGVisibilityPassword";
  case DBSHARINGVisibilityTeamAndPassword:
    return @"DBSHARINGVisibilityTeamAndPassword";
  case DBSHARINGVisibilitySharedFolderOnly:
    return @"DBSHARINGVisibilitySharedFolderOnly";
  case DBSHARINGVisibilityOther:
    return @"DBSHARINGVisibilityOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGVisibilitySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGVisibilitySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGVisibilitySerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGVisibilitySerializer

+ (NSDictionary *)serialize:(DBSHARINGVisibility *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isPublic]) {
    jsonDict[@".tag"] = @"public";
  } else if ([valueObj isTeamOnly]) {
    jsonDict[@".tag"] = @"team_only";
  } else if ([valueObj isPassword]) {
    jsonDict[@".tag"] = @"password";
  } else if ([valueObj isTeamAndPassword]) {
    jsonDict[@".tag"] = @"team_and_password";
  } else if ([valueObj isSharedFolderOnly]) {
    jsonDict[@".tag"] = @"shared_folder_only";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGVisibility *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"public"]) {
    return [[DBSHARINGVisibility alloc] initWithPublic];
  } else if ([tag isEqualToString:@"team_only"]) {
    return [[DBSHARINGVisibility alloc] initWithTeamOnly];
  } else if ([tag isEqualToString:@"password"]) {
    return [[DBSHARINGVisibility alloc] initWithPassword];
  } else if ([tag isEqualToString:@"team_and_password"]) {
    return [[DBSHARINGVisibility alloc] initWithTeamAndPassword];
  } else if ([tag isEqualToString:@"shared_folder_only"]) {
    return [[DBSHARINGVisibility alloc] initWithSharedFolderOnly];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGVisibility alloc] initWithOther];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
