///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBSHARINGCollectionLinkMetadata.h"
#import "DBSHARINGLinkMetadata.h"
#import "DBSHARINGPathLinkMetadata.h"
#import "DBSHARINGVisibility.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGLinkMetadata

#pragma mark - Constructors

- (instancetype)initWithUrl:(NSString *)url visibility:(DBSHARINGVisibility *)visibility expires:(NSDate *)expires {

  self = [super init];
  if (self) {
    _url = url;
    _visibility = visibility;
    _expires = expires;
  }
  return self;
}

- (instancetype)initWithUrl:(NSString *)url visibility:(DBSHARINGVisibility *)visibility {
  return [self initWithUrl:url visibility:visibility expires:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGLinkMetadataSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGLinkMetadataSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGLinkMetadataSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGLinkMetadataSerializer

+ (NSDictionary *)serialize:(DBSHARINGLinkMetadata *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"url"] = valueObj.url;
  jsonDict[@"visibility"] = [DBSHARINGVisibilitySerializer serialize:valueObj.visibility];
  if (valueObj.expires) {
    jsonDict[@"expires"] = [DBNSDateSerializer serialize:valueObj.expires dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }

  if ([valueObj isKindOfClass:[DBSHARINGPathLinkMetadata class]]) {
    NSDictionary *subTypeFields = [DBSHARINGPathLinkMetadataSerializer serialize:(DBSHARINGPathLinkMetadata *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"path";
  } else if ([valueObj isKindOfClass:[DBSHARINGCollectionLinkMetadata class]]) {
    NSDictionary *subTypeFields =
        [DBSHARINGCollectionLinkMetadataSerializer serialize:(DBSHARINGCollectionLinkMetadata *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"collection";
  }

  return jsonDict;
}

+ (DBSHARINGLinkMetadata *)deserialize:(NSDictionary *)valueDict {
  if ([valueDict[@".tag"] isEqualToString:@"path"]) {
    return [DBSHARINGPathLinkMetadataSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"collection"]) {
    return [DBSHARINGCollectionLinkMetadataSerializer deserialize:valueDict];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
