///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBFILESInvalidPropertyGroupError.h"
#import "DBFILESLookupError.h"
#import "DBFILESPropertiesError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBFILESInvalidPropertyGroupError

@synthesize templateNotFound = _templateNotFound;
@synthesize path = _path;

#pragma mark - Constructors

- (instancetype)initWithTemplateNotFound:(NSString *)templateNotFound {
  self = [super init];
  if (self) {
    _tag = DBFILESInvalidPropertyGroupErrorTemplateNotFound;
    _templateNotFound = templateNotFound;
  }
  return self;
}

- (instancetype)initWithRestrictedContent {
  self = [super init];
  if (self) {
    _tag = DBFILESInvalidPropertyGroupErrorRestrictedContent;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBFILESInvalidPropertyGroupErrorOther;
  }
  return self;
}

- (instancetype)initWithPath:(DBFILESLookupError *)path {
  self = [super init];
  if (self) {
    _tag = DBFILESInvalidPropertyGroupErrorPath;
    _path = path;
  }
  return self;
}

- (instancetype)initWithPropertyFieldTooLarge {
  self = [super init];
  if (self) {
    _tag = DBFILESInvalidPropertyGroupErrorPropertyFieldTooLarge;
  }
  return self;
}

- (instancetype)initWithDoesNotFitTemplate {
  self = [super init];
  if (self) {
    _tag = DBFILESInvalidPropertyGroupErrorDoesNotFitTemplate;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)templateNotFound {
  if (![self isTemplateNotFound]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBFILESInvalidPropertyGroupErrorTemplateNotFound, but was %@.", [self tagName]];
  }
  return _templateNotFound;
}

- (DBFILESLookupError *)path {
  if (![self isPath]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBFILESInvalidPropertyGroupErrorPath, but was %@.", [self tagName]];
  }
  return _path;
}

#pragma mark - Tag state methods

- (BOOL)isTemplateNotFound {
  return _tag == DBFILESInvalidPropertyGroupErrorTemplateNotFound;
}

- (BOOL)isRestrictedContent {
  return _tag == DBFILESInvalidPropertyGroupErrorRestrictedContent;
}

- (BOOL)isOther {
  return _tag == DBFILESInvalidPropertyGroupErrorOther;
}

- (BOOL)isPath {
  return _tag == DBFILESInvalidPropertyGroupErrorPath;
}

- (BOOL)isPropertyFieldTooLarge {
  return _tag == DBFILESInvalidPropertyGroupErrorPropertyFieldTooLarge;
}

- (BOOL)isDoesNotFitTemplate {
  return _tag == DBFILESInvalidPropertyGroupErrorDoesNotFitTemplate;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBFILESInvalidPropertyGroupErrorTemplateNotFound:
    return @"DBFILESInvalidPropertyGroupErrorTemplateNotFound";
  case DBFILESInvalidPropertyGroupErrorRestrictedContent:
    return @"DBFILESInvalidPropertyGroupErrorRestrictedContent";
  case DBFILESInvalidPropertyGroupErrorOther:
    return @"DBFILESInvalidPropertyGroupErrorOther";
  case DBFILESInvalidPropertyGroupErrorPath:
    return @"DBFILESInvalidPropertyGroupErrorPath";
  case DBFILESInvalidPropertyGroupErrorPropertyFieldTooLarge:
    return @"DBFILESInvalidPropertyGroupErrorPropertyFieldTooLarge";
  case DBFILESInvalidPropertyGroupErrorDoesNotFitTemplate:
    return @"DBFILESInvalidPropertyGroupErrorDoesNotFitTemplate";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBFILESInvalidPropertyGroupErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBFILESInvalidPropertyGroupErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBFILESInvalidPropertyGroupErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBFILESInvalidPropertyGroupErrorSerializer

+ (NSDictionary *)serialize:(DBFILESInvalidPropertyGroupError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isTemplateNotFound]) {
    jsonDict[@"template_not_found"] = valueObj.templateNotFound;
    jsonDict[@".tag"] = @"template_not_found";
  } else if ([valueObj isRestrictedContent]) {
    jsonDict[@".tag"] = @"restricted_content";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isPath]) {
    jsonDict[@"path"] = [[DBFILESLookupErrorSerializer serialize:valueObj.path] mutableCopy];
    jsonDict[@".tag"] = @"path";
  } else if ([valueObj isPropertyFieldTooLarge]) {
    jsonDict[@".tag"] = @"property_field_too_large";
  } else if ([valueObj isDoesNotFitTemplate]) {
    jsonDict[@".tag"] = @"does_not_fit_template";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBFILESInvalidPropertyGroupError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"template_not_found"]) {
    NSString *templateNotFound = valueDict[@"template_not_found"];
    return [[DBFILESInvalidPropertyGroupError alloc] initWithTemplateNotFound:templateNotFound];
  } else if ([tag isEqualToString:@"restricted_content"]) {
    return [[DBFILESInvalidPropertyGroupError alloc] initWithRestrictedContent];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBFILESInvalidPropertyGroupError alloc] initWithOther];
  } else if ([tag isEqualToString:@"path"]) {
    DBFILESLookupError *path = [DBFILESLookupErrorSerializer deserialize:valueDict[@"path"]];
    return [[DBFILESInvalidPropertyGroupError alloc] initWithPath:path];
  } else if ([tag isEqualToString:@"property_field_too_large"]) {
    return [[DBFILESInvalidPropertyGroupError alloc] initWithPropertyFieldTooLarge];
  } else if ([tag isEqualToString:@"does_not_fit_template"]) {
    return [[DBFILESInvalidPropertyGroupError alloc] initWithDoesNotFitTemplate];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
