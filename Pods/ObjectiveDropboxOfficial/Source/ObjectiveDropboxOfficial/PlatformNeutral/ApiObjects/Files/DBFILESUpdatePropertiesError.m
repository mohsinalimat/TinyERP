///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBFILESInvalidPropertyGroupError.h"
#import "DBFILESLookUpPropertiesError.h"
#import "DBFILESLookupError.h"
#import "DBFILESUpdatePropertiesError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBFILESUpdatePropertiesError

@synthesize templateNotFound = _templateNotFound;
@synthesize path = _path;
@synthesize propertyGroupLookup = _propertyGroupLookup;

#pragma mark - Constructors

- (instancetype)initWithTemplateNotFound:(NSString *)templateNotFound {
  self = [super init];
  if (self) {
    _tag = DBFILESUpdatePropertiesErrorTemplateNotFound;
    _templateNotFound = templateNotFound;
  }
  return self;
}

- (instancetype)initWithRestrictedContent {
  self = [super init];
  if (self) {
    _tag = DBFILESUpdatePropertiesErrorRestrictedContent;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBFILESUpdatePropertiesErrorOther;
  }
  return self;
}

- (instancetype)initWithPath:(DBFILESLookupError *)path {
  self = [super init];
  if (self) {
    _tag = DBFILESUpdatePropertiesErrorPath;
    _path = path;
  }
  return self;
}

- (instancetype)initWithPropertyFieldTooLarge {
  self = [super init];
  if (self) {
    _tag = DBFILESUpdatePropertiesErrorPropertyFieldTooLarge;
  }
  return self;
}

- (instancetype)initWithDoesNotFitTemplate {
  self = [super init];
  if (self) {
    _tag = DBFILESUpdatePropertiesErrorDoesNotFitTemplate;
  }
  return self;
}

- (instancetype)initWithPropertyGroupLookup:(DBFILESLookUpPropertiesError *)propertyGroupLookup {
  self = [super init];
  if (self) {
    _tag = DBFILESUpdatePropertiesErrorPropertyGroupLookup;
    _propertyGroupLookup = propertyGroupLookup;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)templateNotFound {
  if (![self isTemplateNotFound]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBFILESUpdatePropertiesErrorTemplateNotFound, but was %@.", [self tagName]];
  }
  return _templateNotFound;
}

- (DBFILESLookupError *)path {
  if (![self isPath]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBFILESUpdatePropertiesErrorPath, but was %@.", [self tagName]];
  }
  return _path;
}

- (DBFILESLookUpPropertiesError *)propertyGroupLookup {
  if (![self isPropertyGroupLookup]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBFILESUpdatePropertiesErrorPropertyGroupLookup, but was %@.", [self tagName]];
  }
  return _propertyGroupLookup;
}

#pragma mark - Tag state methods

- (BOOL)isTemplateNotFound {
  return _tag == DBFILESUpdatePropertiesErrorTemplateNotFound;
}

- (BOOL)isRestrictedContent {
  return _tag == DBFILESUpdatePropertiesErrorRestrictedContent;
}

- (BOOL)isOther {
  return _tag == DBFILESUpdatePropertiesErrorOther;
}

- (BOOL)isPath {
  return _tag == DBFILESUpdatePropertiesErrorPath;
}

- (BOOL)isPropertyFieldTooLarge {
  return _tag == DBFILESUpdatePropertiesErrorPropertyFieldTooLarge;
}

- (BOOL)isDoesNotFitTemplate {
  return _tag == DBFILESUpdatePropertiesErrorDoesNotFitTemplate;
}

- (BOOL)isPropertyGroupLookup {
  return _tag == DBFILESUpdatePropertiesErrorPropertyGroupLookup;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBFILESUpdatePropertiesErrorTemplateNotFound:
    return @"DBFILESUpdatePropertiesErrorTemplateNotFound";
  case DBFILESUpdatePropertiesErrorRestrictedContent:
    return @"DBFILESUpdatePropertiesErrorRestrictedContent";
  case DBFILESUpdatePropertiesErrorOther:
    return @"DBFILESUpdatePropertiesErrorOther";
  case DBFILESUpdatePropertiesErrorPath:
    return @"DBFILESUpdatePropertiesErrorPath";
  case DBFILESUpdatePropertiesErrorPropertyFieldTooLarge:
    return @"DBFILESUpdatePropertiesErrorPropertyFieldTooLarge";
  case DBFILESUpdatePropertiesErrorDoesNotFitTemplate:
    return @"DBFILESUpdatePropertiesErrorDoesNotFitTemplate";
  case DBFILESUpdatePropertiesErrorPropertyGroupLookup:
    return @"DBFILESUpdatePropertiesErrorPropertyGroupLookup";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBFILESUpdatePropertiesErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBFILESUpdatePropertiesErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBFILESUpdatePropertiesErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBFILESUpdatePropertiesErrorSerializer

+ (NSDictionary *)serialize:(DBFILESUpdatePropertiesError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isTemplateNotFound]) {
    jsonDict[@"template_not_found"] = valueObj.templateNotFound;
    jsonDict[@".tag"] = @"template_not_found";
  } else if ([valueObj isRestrictedContent]) {
    jsonDict[@".tag"] = @"restricted_content";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isPath]) {
    jsonDict[@"path"] = [[DBFILESLookupErrorSerializer serialize:valueObj.path] mutableCopy];
    jsonDict[@".tag"] = @"path";
  } else if ([valueObj isPropertyFieldTooLarge]) {
    jsonDict[@".tag"] = @"property_field_too_large";
  } else if ([valueObj isDoesNotFitTemplate]) {
    jsonDict[@".tag"] = @"does_not_fit_template";
  } else if ([valueObj isPropertyGroupLookup]) {
    jsonDict[@"property_group_lookup"] =
        [[DBFILESLookUpPropertiesErrorSerializer serialize:valueObj.propertyGroupLookup] mutableCopy];
    jsonDict[@".tag"] = @"property_group_lookup";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBFILESUpdatePropertiesError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"template_not_found"]) {
    NSString *templateNotFound = valueDict[@"template_not_found"];
    return [[DBFILESUpdatePropertiesError alloc] initWithTemplateNotFound:templateNotFound];
  } else if ([tag isEqualToString:@"restricted_content"]) {
    return [[DBFILESUpdatePropertiesError alloc] initWithRestrictedContent];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBFILESUpdatePropertiesError alloc] initWithOther];
  } else if ([tag isEqualToString:@"path"]) {
    DBFILESLookupError *path = [DBFILESLookupErrorSerializer deserialize:valueDict[@"path"]];
    return [[DBFILESUpdatePropertiesError alloc] initWithPath:path];
  } else if ([tag isEqualToString:@"property_field_too_large"]) {
    return [[DBFILESUpdatePropertiesError alloc] initWithPropertyFieldTooLarge];
  } else if ([tag isEqualToString:@"does_not_fit_template"]) {
    return [[DBFILESUpdatePropertiesError alloc] initWithDoesNotFitTemplate];
  } else if ([tag isEqualToString:@"property_group_lookup"]) {
    DBFILESLookUpPropertiesError *propertyGroupLookup =
        [DBFILESLookUpPropertiesErrorSerializer deserialize:valueDict[@"property_group_lookup"]];
    return [[DBFILESUpdatePropertiesError alloc] initWithPropertyGroupLookup:propertyGroupLookup];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end
